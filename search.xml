<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[083.Remove Duplicates From Sorted List]]></title>
      <url>http://ninefu.github.io/blog/083-Remove-Duplicates-from-Sorted-List/</url>
      <content type="html"><![CDATA[<p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>For example,<br>Given 1-&gt;1-&gt;2, return 1-&gt;2.<br>Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</p>
<h3 id="Iterative_Solution_2C_O_28n_29_time_2C_O_281_29_space"><a href="#Iterative_Solution_2C_O_28n_29_time_2C_O_281_29_space" class="headerlink" title="Iterative Solution, O(n) time, O(1) space"></a>Iterative Solution, O(n) time, O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode current = head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span> &amp;&amp; current.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (current.val == current.next.val)&#123;</span><br><span class="line">                current.next = current.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Recursive_Solution_2C_O_28n_29_time_2C_O_28n_29_space"><a href="#Recursive_Solution_2C_O_28n_29_time_2C_O_28n_29_space" class="headerlink" title="Recursive Solution, O(n) time, O(n) space"></a>Recursive Solution, O(n) time, O(n) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        head.next = deleteDuplicates(head.next);</span><br><span class="line">        <span class="keyword">return</span> head.val == head.next.val ? head.next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[024.Swap Nodes in Pairs]]></title>
      <url>http://ninefu.github.io/blog/024-Swap-Nodes-in-Pairs/</url>
      <content type="html"><![CDATA[<p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>For example, given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>
<p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
<h3 id="Iterative_Solution_2C_O_28n_29_time_O_281_29_space"><a href="#Iterative_Solution_2C_O_28n_29_time_O_281_29_space" class="headerlink" title="Iterative Solution, O(n) time O(1) space"></a>Iterative Solution, O(n) time O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode prev = dummy;</span><br><span class="line">        ListNode first, second;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (prev.next != <span class="keyword">null</span> &amp;&amp; prev.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            first = prev.next;</span><br><span class="line">            second = prev.next.next;</span><br><span class="line">            first.next = second.next;</span><br><span class="line">            prev.next = second;</span><br><span class="line">            second.next = first;</span><br><span class="line">            prev = prev.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Recursive_Solution_2C_O_28n_29_time_O_28n_29_space"><a href="#Recursive_Solution_2C_O_28n_29_time_O_28n_29_space" class="headerlink" title="Recursive Solution, O(n) time O(n) space"></a>Recursive Solution, O(n) time O(n) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode second = head.next;</span><br><span class="line">        head.next = swapPairs(head.next.next);</span><br><span class="line">        second.next = head;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[019.Remove Nth Node From End of List]]></title>
      <url>http://ninefu.github.io/blog/019.Remove-Nth-Node-From-End-of-List/</url>
      <content type="html"><![CDATA[<p>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example, given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</p>
<p>Note:<br>Given n will always be valid. Try to do this in one pass.</p>
<a id="more"></a>
<h3 id="Two_passes_solution_2C_O_28n_29_time_2C_O_281_29_space"><a href="#Two_passes_solution_2C_O_28n_29_time_2C_O_281_29_space" class="headerlink" title="Two passes solution, O(n) time, O(1) space"></a>Two passes solution, O(n) time, O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        length -= n;</span><br><span class="line">        first = dummy;</span><br><span class="line">        <span class="keyword">while</span> (length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        first.next = first.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="One_pass_solution_2C_O_28n_29_time_2C_O_281_29_space"><a href="#One_pass_solution_2C_O_28n_29_time_2C_O_281_29_space" class="headerlink" title="One pass solution, O(n) time, O(1) space"></a>One pass solution, O(n) time, O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode slow = dummy;</span><br><span class="line">        ListNode fast = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if the two pointers are n nodes away, excluding themselves, then the while condition is "fast != null"</span></span><br><span class="line">        <span class="comment">// if the two pointers are n - 1 nodes away, the condition should be "first.next != null"</span></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CS 5412 Cloud Computing Notes]]></title>
      <url>http://ninefu.github.io/blog/CS-5412-Cloud-Computing-Notes/</url>
      <content type="html"><![CDATA[<ul>
<li>*aaS<ul>
<li>IaaS</li>
<li>SaaS</li>
<li>PaaS</li>
</ul>
</li>
<li>DNS</li>
<li>content distribution service</li>
<li>cryptographic<ul>
<li>AES 256</li>
<li>SSL - HTTPS</li>
</ul>
</li>
<li>Meaning of closest</li>
<li>Network address translation</li>
<li>Border Gateway Protocol and routing complexity</li>
<li>TCP-R</li>
<li>Software Defined Networking</li>
<li>Overlay Network<ul>
<li>VPN</li>
<li>RON</li>
<li>Chord</li>
</ul>
</li>
<li>DHT, hot spots, churn, and network partition<ul>
<li>CAN</li>
<li>Chord<ul>
<li>Finger table</li>
<li>Successor list</li>
</ul>
</li>
<li>Beehive: Item replicated on N/2 nodes</li>
<li>Kelips: Network partitioned into √N “affinity groups”</li>
<li>Pastry: pick one from a set of target nodes as a finger link</li>
</ul>
</li>
<li>Inside a data center<ul>
<li>Memcached</li>
<li>Dynamo</li>
<li>BigTable<ul>
<li>version</li>
<li>SSTable</li>
<li>Tablet</li>
<li>Table</li>
</ul>
</li>
<li>GFS</li>
<li>Chubby</li>
<li>Zookeeper: virtual synchrony protocol</li>
<li>TAO</li>
<li>MapReduce </li>
</ul>
</li>
<li>Load balancing</li>
<li>Gossip</li>
<li>BAR Gossip</li>
<li>BitTorrent<ul>
<li>Swarm</li>
<li>Pieces choosing algorithm</li>
<li>Choke and Anti-snubbing</li>
</ul>
</li>
<li>Cloud<ul>
<li>CAP: you can have just two from Consistency, Availability and Partition Tolerance </li>
<li>ACID Model: Atomicity, Consistency, Isolation and Durability</li>
<li>BASE Methodology: Basically Available Soft-State<br>Services with Eventual Consistency</li>
</ul>
</li>
<li>Time<ul>
<li>Happens before relation</li>
<li>Logic clock</li>
<li>Vector clock</li>
<li>Temporal distortions</li>
<li>Consistent cut</li>
<li>Snapshots: Chandy/Lamport Algorithm</li>
<li>Phantom Deadlock</li>
</ul>
</li>
<li>2PC</li>
<li>3PC: without any log service, and with accurate failure detection is non-blocking</li>
<li>Causes of delay in the cloud<ul>
<li>Scheduling</li>
<li>A node might get a burst of messages that overflow its input sockets and triggers message loss, or network could have some kind of malfunction in its routers/links</li>
<li>A machine might become overloaded and slow because too many virtual machines were mapped on it</li>
<li>An application might run wild and page heavily</li>
</ul>
</li>
<li>FLP theorem<ul>
<li>Impossibility of Asynchronous Distributed Consensus with<br>a Single Faulty Process</li>
<li>No asynchronous algorithm for agreeing on a one-bit value can guarantee that it will terminate in the presence of crash faults</li>
<li>FLP proves that any fault-tolerant algorithm solving consensus has runs that never terminate</li>
<li>Failstop failure </li>
<li>Byzantine failure<ul>
<li>need at least 3f+1 processes and f+1 “rounds” in a system to tolerate f Byzantine failure</li>
<li>Send messages with digital signatures all along and add one more round for communicating wtiness messages to expose corrupted process, though the overheads are high</li>
<li>“Early stopping” protocols: min(t+2, f+1) rounds; t is true number of faults</li>
<li>current research<ul>
<li>Byzantine Quorums</li>
<li>Split secrets</li>
<li>Byzantine Broadcast</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Paxos<ul>
<li>To tolerate ≤ t failures, deploy 2t+1 replicas (e.g. Paxos with 3 replicas can tolerate 1 failure)</li>
<li>Quorum</li>
<li>Leader, acceptor, learner</li>
<li>Ballot numbers and slot</li>
</ul>
</li>
<li>Virtual Synchrony<ul>
<li>Group communication</li>
</ul>
</li>
<li>Transactions:<ul>
<li>Locking</li>
<li>Log</li>
<li>Serializability</li>
<li>2 PL or timestamp</li>
<li>Write ahead log</li>
</ul>
</li>
<li>Performance<ul>
<li>Componentized design</li>
<li>serialization</li>
<li>SOAP: Simple Object Access Protocol</li>
<li>Wrapper</li>
<li>Remote shared log</li>
<li>Corfu: logging services for situations where reliability and speed are paramount</li>
</ul>
</li>
<li>Bimodal Multicast</li>
<li>Astrolabe</li>
<li>SST and RDMA</li>
<li>Gossip and Network Overlay<ul>
<li>Scribe</li>
<li>T-man</li>
</ul>
</li>
<li>Real-time<ul>
<li>Data Distribution Service for Real-Time Systems (DDS)</li>
<li>quality of service: throughput and latency</li>
<li>CASD</li>
</ul>
</li>
<li>Asynchronous computing</li>
<li>Facebook edge, resizer cache, Haystack</li>
<li>TAO</li>
<li>Security<ul>
<li>Danger of replication: Monoculture</li>
<li>Configuration attacks<ul>
<li>Stack attack</li>
<li>Stack randomization</li>
</ul>
</li>
<li>Technology attacks</li>
<li>Trust attacks</li>
<li>Virtualization and diversity</li>
<li>hard to DDoS cloud</li>
<li>CryptDB</li>
</ul>
</li>
<li>Supercloud</li>
<li>Value proposition</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Queue]]></title>
      <url>http://ninefu.github.io/blog/Queue/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span>&#123;</span><br><span class="line">	Element[] array;</span><br><span class="line">	<span class="keyword">int</span> enqueueIndex;</span><br><span class="line">	<span class="keyword">int</span> dequeueIndex;</span><br><span class="line">	<span class="keyword">int</span> size;</span><br><span class="line">	</span><br><span class="line">	Queue(<span class="keyword">int</span> length)&#123;</span><br><span class="line">		array = <span class="keyword">new</span> Element[length];</span><br><span class="line">		size = length;</span><br><span class="line">		enqueueIndex = <span class="number">0</span>;</span><br><span class="line">		dequeueIndex = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> Element <span class="title">dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (dequeueIndex == enqueueIndex)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		Element cur = array[dequeuIndex];</span><br><span class="line">		array[dequeueIndex] = <span class="keyword">null</span>; <span class="comment">// deferencing the dequeued object</span></span><br><span class="line">		dequeueIndex = (dequeueIndex + <span class="number">1</span>) % size;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Element e)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ((enqueueIndex + <span class="number">1</span>) % size == dequeueIndex)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			array[enqueueIndex] = e;</span><br><span class="line">			enqueueIndex = (enqueueIndex + <span class="number">1</span>) % size;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Peekable Iterator]]></title>
      <url>http://ninefu.github.io/blog/Peekable-Iterator/</url>
      <content type="html"><![CDATA[<p>Given an iterator, implement a peekable iterator with peek() which will return the value without advancing the underlying iterator</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">peekableIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Iterator iter;</span><br><span class="line">	<span class="keyword">private</span> T prev;</span><br><span class="line">	</span><br><span class="line">	peekableIterator(Iterator it)&#123;</span><br><span class="line">			iter = it;</span><br><span class="line">			prev = it.hasNext() ? it.next() : <span class="keyword">null</span>;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> prev != <span class="keyword">null</span> || iter.hasNext();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">T <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">		T res = prev;</span><br><span class="line">		prev = it.hasNext() ? it.next() : <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">T <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> prev;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Max Root to Leaf Sum]]></title>
      <url>http://ninefu.github.io/blog/Max-Root-to-Leaf-Sum/</url>
      <content type="html"><![CDATA[<p>Find out the maximum cost of all the possible root-to-leaf paths</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">solution</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathCost</span><span class="params">(Node root)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> root.value;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> leftMax = maxPathCost(root.left);</span><br><span class="line">		<span class="keyword">int</span> rightMax = maxPathCost(root.right);</span><br><span class="line">		<span class="keyword">return</span> root.val + leftMax &gt; rightMax ? leftMax : rightMax;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Merge Two Sorted Lists]]></title>
      <url>http://ninefu.github.io/blog/Merge-Two-Sorted-Lists/</url>
      <content type="html"><![CDATA[<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<h3 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt; l2.val)&#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            cur.next = l1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next = l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val)&#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Merge K Sorted Lists]]></title>
      <url>http://ninefu.github.io/blog/Merge-k-Sorted-Lists/</url>
      <content type="html"><![CDATA[<p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<h3 id="Heap_2C_O_28n_log_k_29_time_complexity"><a href="#Heap_2C_O_28n_log_k_29_time_complexity" class="headerlink" title="Heap, O(n log k) time complexity"></a>Heap, O(n log k) time complexity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            </span><br><span class="line">        PriorityQueue&lt;ListNode&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;ListNode&gt;(lists.length, <span class="keyword">new</span> Comparator&lt;ListNode&gt;()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode l1, ListNode l2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> l1.val - l2.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (lists[i] != <span class="keyword">null</span>)</span><br><span class="line">                pq.add(lists[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode prev = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode head = prev;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(pq.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            head.next = pq.poll();</span><br><span class="line">            head = head.next;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (head.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                pq.add(head.next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Recursion_2C_divide_and_conquer"><a href="#Recursion_2C_divide_and_conquer" class="headerlink" title="Recursion, divide and conquer"></a>Recursion, divide and conquer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> partition(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode[] lists, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end)</span><br><span class="line">            <span class="keyword">return</span> lists[start];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            ListNode l1 = partition(lists, start, mid);</span><br><span class="line">            ListNode l2 = partition(lists, mid + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">return</span> merge(l1, l2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val)&#123;</span><br><span class="line">            l1.next = merge(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l2.next = merge(l1,l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Missing Number]]></title>
      <url>http://ninefu.github.io/blog/Missing_Number/</url>
      <content type="html"><![CDATA[<p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<p>For example,<br>Given nums = [0, 1, 3] return 2.</p>
<p>Note:<br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>
<a id="more"></a>
<h3 id="Sum_2C_O_28n_29_time_2C_O_281_29_space"><a href="#Sum_2C_O_28n_29_time_2C_O_281_29_space" class="headerlink" title="Sum, O(n) time, O(1) space"></a>Sum, O(n) time, O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = (<span class="number">0</span> + length) * (length + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            sum -= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bit_2C_O_28n_29_time_2C_O_281_29_space"><a href="#Bit_2C_O_28n_29_time_2C_O_281_29_space" class="headerlink" title="Bit, O(n) time, O(1) space"></a>Bit, O(n) time, O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> xor = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            xor = xor ^ i ^ nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xor ^ nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Binary_Search_2C_O_28n_log_n_29_time_2C_O_281_29_space"><a href="#Binary_Search_2C_O_28n_log_n_29_time_2C_O_281_29_space" class="headerlink" title="Binary Search, O(n log n) time, O(1) space"></a>Binary Search, O(n log n) time, O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// think about the boudaries</span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == mid)&#123;</span><br><span class="line">                start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Candy]]></title>
      <url>http://ninefu.github.io/blog/Candy/</url>
      <content type="html"><![CDATA[<p>There are N children standing in a line. Each child is assigned a rating value.</p>
<p>You are giving candies to these children subjected to the following requirements:</p>
<p>Each child must have at least one candy.<br>Children with a higher rating get more candies than their neighbors.<br>What is the minimum candies you must give?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] ratings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ratings == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = ratings.length;</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= <span class="number">1</span>) <span class="keyword">return</span> length;</span><br><span class="line">        <span class="keyword">int</span>[] candies = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="number">1</span>])&#123;</span><br><span class="line">                candies[i] = candies[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                candies[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = ratings.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;<span class="number">0</span> &amp;&amp; ratings[j] &lt; ratings[j - <span class="number">1</span>])&#123;</span><br><span class="line">                candies[j - <span class="number">1</span>] = Math.max(candies[j] + <span class="number">1</span>, candies[j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            result += candies[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.com/discuss/23835/one-pass-constant-space-java-solution" target="_blank" rel="external">Another solution from Leetcode</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] ratings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ratings == <span class="keyword">null</span> || ratings.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">1</span>, prev = <span class="number">1</span>, countDown = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ratings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt;= ratings[i-<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (countDown &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    total += countDown*(countDown+<span class="number">1</span>)/<span class="number">2</span>; <span class="comment">// arithmetic progression</span></span><br><span class="line">                    <span class="keyword">if</span> (countDown &gt;= prev) total += countDown - prev + <span class="number">1</span>;</span><br><span class="line">                    countDown = <span class="number">0</span>;</span><br><span class="line">                    prev = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prev = ratings[i] == ratings[i-<span class="number">1</span>] ? <span class="number">1</span> : prev+<span class="number">1</span>;</span><br><span class="line">                total += prev;</span><br><span class="line">            &#125; <span class="keyword">else</span> countDown++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (countDown &gt; <span class="number">0</span>) &#123; <span class="comment">// if we were descending at the end</span></span><br><span class="line">            total += countDown*(countDown+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (countDown &gt;= prev) total += countDown - prev + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Add and Search Word - Data Structure Design]]></title>
      <url>http://ninefu.github.io/blog/Add_and_Search_Word_Data_structure_design/</url>
      <content type="html"><![CDATA[<p>Design a data structure that supports the following two operations:</p>
<p>void addWord(word)<br>bool search(word)<br>search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.</p>
<p>For example:</p>
<p>addWord(“bad”)<br>addWord(“dad”)<br>addWord(“mad”)<br>search(“pad”) -&gt; false<br>search(“bad”) -&gt; true<br>search(“.ad”) -&gt; true<br>search(“b..”) -&gt; true<br>Note:<br>You may assume that all words are consist of lowercase letters a-z.</p>
<h3 id="Solution_using_Trie"><a href="#Solution_using_Trie" class="headerlink" title="Solution using Trie"></a>Solution using Trie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</span><br><span class="line">    TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> isWord;</span><br><span class="line">        <span class="keyword">public</span> TrieNode[] children;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">            isWord = <span class="keyword">false</span>;</span><br><span class="line">            children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adds a word into the data structure.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word != <span class="keyword">null</span>)&#123;</span><br><span class="line">            TrieNode cur = root;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> index = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (cur.children[index] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    cur.children[index] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.children[index];</span><br><span class="line">            &#125;</span><br><span class="line">            cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns if the word is in the data structure. A word could</span></span><br><span class="line">    <span class="comment">// contain the dot character '.' to represent any one letter.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> searchArray(word.toCharArray(), <span class="number">0</span>, root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchArray</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> start, TrieNode node)</span></span>&#123;</span><br><span class="line">        TrieNode cur = node;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; chars.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (chars[i] != <span class="string">'.'</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> index = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">                    cur = cur.children[index];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    TrieNode temp = cur;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)&#123;</span><br><span class="line">                        cur = temp.children[j];</span><br><span class="line">                        <span class="keyword">if</span> (searchArray(chars, i+<span class="number">1</span>, cur))</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur != <span class="keyword">null</span> &amp;&amp; cur.isWord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your WordDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// WordDictionary wordDictionary = new WordDictionary();</span></span><br><span class="line"><span class="comment">// wordDictionary.addWord("word");</span></span><br><span class="line"><span class="comment">// wordDictionary.search("pattern");</span></span><br></pre></td></tr></table></figure>
<h3 id="Solution_using_Map"><a href="#Solution_using_Map" class="headerlink" title="Solution using Map"></a>Solution using Map</h3><p>from <a href="https://leetcode.com/discuss/44509/java-solution-easy-understand" target="_blank" rel="external">this post</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, List&lt;String&gt;&gt;();</span><br><span class="line">    <span class="comment">// Adds a word into the data structure.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = word.length();</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(index))&#123;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            list.add(word);</span><br><span class="line">            map.put(index, list);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.get(index).add(word);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns if the word is in the data structure. A word could</span></span><br><span class="line">    <span class="comment">// contain the dot character '.' to represent any one letter.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = word.length();</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(index))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; list = map.get(index);</span><br><span class="line">        <span class="keyword">if</span>(isWords(word))&#123;</span><br><span class="line">            <span class="keyword">return</span> list.contains(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isSame(s, word))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isWords</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Character.isLetter(s.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSame</span><span class="params">(String a, String search)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length() != search.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(search.charAt(i) != <span class="string">'.'</span> &amp;&amp; search.charAt(i) != a.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your WordDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// WordDictionary wordDictionary = new WordDictionary();</span></span><br><span class="line"><span class="comment">// wordDictionary.addWord("word");</span></span><br><span class="line"><span class="comment">// wordDictionary.search("pattern");</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Implement Trie (Prefix Tree)]]></title>
      <url>http://ninefu.github.io/blog/Implement_Trie_Prefix_Tree/</url>
      <content type="html"><![CDATA[<p>Implement a trie with insert, search, and startsWith methods.</p>
<p>Note:<br>You may assume that all inputs are consist of lowercase letters a-z.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isWord;</span><br><span class="line">    TrieNode[] children;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Initialize your data structure here.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        isWord = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inserts a word into the trie.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word != <span class="keyword">null</span> || word.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            TrieNode cur = root;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> index = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (cur.children[index] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    cur.children[index] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.children[index];</span><br><span class="line">            &#125;</span><br><span class="line">            cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns if the word is in the trie.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        TrieNode cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur.children[index] == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            cur = cur.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cur.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns if there is any word in the trie</span></span><br><span class="line">    <span class="comment">// that starts with the given prefix.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prefix == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        TrieNode cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = prefix.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur.children[index] == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            cur = cur.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Trie trie = new Trie();</span></span><br><span class="line"><span class="comment">// trie.insert("somestring");</span></span><br><span class="line"><span class="comment">// trie.search("key");</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Two Sum II - Input Array Is Sorted]]></title>
      <url>http://ninefu.github.io/blog/Two_Sum_II_Input_array_is_sorted/</url>
      <content type="html"><![CDATA[<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
<h3 id="Two_pointers_O_28n_29_solution"><a href="#Two_pointers_O_28n_29_solution" class="headerlink" title="Two pointers O(n) solution"></a>Two pointers O(n) solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[left] + numbers[right];</span><br><span class="line">            <span class="keyword">if</span> (sum == target)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = left + <span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = right + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Binary_Search_O_28n_log_n_29_solution"><a href="#Binary_Search_O_28n_log_n_29_solution" class="headerlink" title="Binary Search O(n log n) solution"></a>Binary Search O(n log n) solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] + numbers[numbers.length - <span class="number">1</span>] &lt; target)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> index = binarySearch(numbers, i, target - numbers[i]);</span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span>)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = index + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = numbers.length;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (start &lt; mid &amp;&amp; mid &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = numbers[mid];</span><br><span class="line">            <span class="keyword">if</span> (cur &lt; target)&#123;</span><br><span class="line">                start = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cur &gt; target)&#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Closest Binary Search Tree Value]]></title>
      <url>http://ninefu.github.io/blog/Closest_Binary_Search_Tree_Value/</url>
      <content type="html"><![CDATA[<p>Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.</p>
<p>Note:<br>Given target value is a floating point.<br>You are guaranteed to have only one unique value in the BST that is closest to the target.</p>
<h3 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">closestValue</span><span class="params">(TreeNode root, <span class="keyword">double</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = root.val;</span><br><span class="line">        TreeNode child = target &lt; cur ? root.left : root.right;</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) <span class="keyword">return</span> cur;</span><br><span class="line">        <span class="keyword">int</span> next = closestValue(child, target);</span><br><span class="line">        <span class="keyword">return</span> Math.abs(target - cur) &lt; Math.abs(target - next) ? cur : next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">closestValue</span><span class="params">(TreeNode root, <span class="keyword">double</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = root.val;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(res - target) &gt;= Math.abs(root.val - target))</span><br><span class="line">                res = root.val;</span><br><span class="line">            root = target &lt; root.val ? root.left : root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linked List Cycle]]></title>
      <url>http://ninefu.github.io/blog/Linked_List_Cycle/</url>
      <content type="html"><![CDATA[<p>Given a linked list, determine if it has a cycle in it.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
<p>O(n) time O(1) space</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123;</span><br><span class="line"> *         val = x;</span><br><span class="line"> *         next = null;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode slower = head, faster = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (faster != <span class="keyword">null</span> &amp;&amp; faster.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            slower = slower.next;</span><br><span class="line">            faster = faster.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slower == faster)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Merge Intevals]]></title>
      <url>http://ninefu.github.io/blog/Merge_Intevals/</url>
      <content type="html"><![CDATA[<p>Given a collection of intervals, merge all overlapping intervals.</p>
<p>For example,</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Given [<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>],</span><br><span class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>].</span><br></pre></td></tr></table></figure>
<h3 id="O_28n_log_n_29_solution"><a href="#O_28n_log_n_29_solution" class="headerlink" title="O(n log n) solution"></a>O(n log n) solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for an interval.</span><br><span class="line"> * public class Interval &#123;</span><br><span class="line"> *     int start;</span><br><span class="line"> *     int end;</span><br><span class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</span><br><span class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.size() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> intervals;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Collections.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval i1, Interval i2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> i1.start - i2.start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        List&lt;Interval&gt; result = <span class="keyword">new</span> LinkedList&lt;Interval&gt;();</span><br><span class="line">        Interval prev = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Interval interval : intervals)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="keyword">null</span> || prev.end &lt; interval.start)&#123;</span><br><span class="line">                result.add(interval);</span><br><span class="line">                prev = interval;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prev.end = Math.max(prev.end, interval.end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Single Number II]]></title>
      <url>http://ninefu.github.io/blog/Single_Number_II/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, every element appears three times except for one. Find that single one.</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<h3 id="HashMap_O_28n_29_time_O_28n_29_space_solution"><a href="#HashMap_O_28n_29_time_O_28n_29_space_solution" class="headerlink" title="HashMap O(n) time O(n) space solution"></a>HashMap O(n) time O(n) space solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>)&#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (counts.containsKey(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">int</span> count = counts.get(nums[i]);</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">2</span>)&#123;</span><br><span class="line">                    counts.remove(nums[i]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    counts.put(nums[i], count + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                counts.put(nums[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; num = counts.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it = num.iterator();</span><br><span class="line">        Map.Entry&lt;Integer, Integer&gt; entry = it.next();</span><br><span class="line">        <span class="keyword">return</span> entry.getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bit_solution"><a href="#Bit_solution" class="headerlink" title="Bit solution"></a>Bit solution</h3><p><a href="https://leetcode.com/discuss/31595/detailed-explanation-generalization-bitwise-operation-numbers" target="_blank" rel="external">Explanation</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            ones = (ones ^ nums[i]) &amp; ~twos;</span><br><span class="line">            twos = (twos ^ nums[i]) &amp; ~ones;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ones;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Level Order Traversal II]]></title>
      <url>http://ninefu.github.io/blog/Binary_Tree_Level_Order_Traversal_II/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>
<p>For example:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given binary tree &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="preprocessor">#,#,<span class="number">15</span>,<span class="number">7</span>&#125;,</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>return its bottom-up level order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">// result list</span></span><br><span class="line">        List&lt;Integer&gt; sub; <span class="comment">// sub list for each level</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> res;&#125;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; level = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        level.add(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (level.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sub = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> levelNum = level.size();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class="line">                TreeNode cur = level.poll();</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>) level.add(cur.left);</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>) level.add(cur.right);</span><br><span class="line">                sub.add(cur.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// insert at the beginning of the linkedlist</span></span><br><span class="line">            res.add(<span class="number">0</span>,sub);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><blockquote>
<p>The attached is my current recursive solution. In each function call, we pass in the current node and its level. If this level does not yet exist in the output container, then we should add a new empty level. Then, we add the current node to the end of the current level, and recursively call the function passing the two children of the current node at the next level. This algorithm is really a DFS, but it saves the level information for each node and produces the same result as BFS would.</p>
</blockquote>
<p>from this <a href="https://leetcode.com/discuss/5353/there-better-regular-level-order-traversal-reverse-result" target="_blank" rel="external">post</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        levelMaker(res, root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelMaker</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, TreeNode root, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (level &gt;= list.size())&#123;</span><br><span class="line">            list.add(<span class="number">0</span>, <span class="keyword">new</span> LinkedList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        levelMaker(list, root.left, level + <span class="number">1</span>);</span><br><span class="line">        levelMaker(list, root.right, level + <span class="number">1</span>);</span><br><span class="line">        list.get(list.size() - level - <span class="number">1</span>).add(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Level Order Traversal]]></title>
      <url>http://ninefu.github.io/blog/Binary_Tree_Level_Order_Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br>Given binary tree {3,9,20,#,#,15,7},</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>return its level order traversal as:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="Using_a_queue_to_keep_nodes_in_the_same_level"><a href="#Using_a_queue_to_keep_nodes_in_the_same_level" class="headerlink" title="Using a queue to keep nodes in the same level"></a>Using a queue to keep nodes in the same level</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// result list</span></span><br><span class="line">        List&lt;Integer&gt; sub; <span class="comment">// sub list for each level</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> res;&#125;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; level = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        level.add(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (level.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sub = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> levelNum = level.size();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class="line">                TreeNode cur = level.poll();</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>) level.add(cur.left);</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>) level.add(cur.right);</span><br><span class="line">                sub.add(cur.val);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(sub);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lowest Common Ancestor of a Binary Tree]]></title>
      <url>http://ninefu.github.io/blog/Lowest_Common_Ancestor_of_a_Binary_Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     _______3______</span><br><span class="line">    /              \</span><br><span class="line"> ___5__          ___1__</span><br><span class="line">/      \        /      \</span><br><span class="line"><span class="number">6</span>      _2       <span class="number">0</span>       <span class="number">8</span></span><br><span class="line">      /  \</span><br><span class="line">      <span class="number">7</span>   <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p>
<h3 id="Recursive_solution_2C_O_28n_29"><a href="#Recursive_solution_2C_O_28n_29" class="headerlink" title="Recursive solution, O(n)"></a>Recursive solution, O(n)</h3><p>Since this is a binary tree not a binary search tree, if two nodes p and q are both on the same subtree (left or right), then the lowest common ancestor must be the node between q and p with higher hierachy in the tree. Otherwise, root is the lowest common ancestor. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">return</span> left == <span class="keyword">null</span> ? right : right == <span class="keyword">null</span> ? left : root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Iterative_solution_2C_O_282n_29"><a href="#Iterative_solution_2C_O_282n_29" class="headerlink" title="Iterative solution, O(2n)"></a>Iterative solution, O(2n)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        Map&lt;TreeNode, TreeNode&gt; parent = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        parent.put(root,<span class="keyword">null</span>);</span><br><span class="line">        stack.push(root);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find the parent of all nodes</span></span><br><span class="line">        <span class="keyword">while</span> (!parent.containsKey(q) || !parent.containsKey(p))&#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                parent.put(node.left, node);</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                parent.put(node.right, node);</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// get the ancestor list starting from p</span></span><br><span class="line">        Set&lt;TreeNode&gt; ancestors = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ancestors.add(p);</span><br><span class="line">            p = parent.get(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// go through q's ancestor list until find one the same as p</span></span><br><span class="line">        <span class="keyword">while</span> (! ancestors.contains(q))&#123;</span><br><span class="line">            q = parent.get(q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lowest Common Ancestor of a Binary Search Tree]]></title>
      <url>http://ninefu.github.io/blog/Lowest_Common_Ancestor_of_a_Binary_Search_Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>
<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        _______6______</span><br><span class="line">       /              <span class="string">\</span></span><br><span class="line">    ___2__          ___8__</span><br><span class="line">   /      <span class="string">\</span>        /      <span class="string">\</span></span><br><span class="line">   <span class="number">0</span>      _4       <span class="number">7</span>       <span class="number">9</span></span><br><span class="line">         /  <span class="string">\</span></span><br><span class="line">         <span class="number">3</span>   <span class="number">5</span></span><br><span class="line">For example, the lowest common ancestor (LCA) <span class="keyword">of</span> nodes <span class="number">2</span> <span class="keyword">and</span> <span class="number">8</span> <span class="keyword">is</span> <span class="number">6.</span> Another example <span class="keyword">is</span> LCA <span class="keyword">of</span> nodes <span class="number">2</span> <span class="keyword">and</span> <span class="number">4</span> <span class="keyword">is</span> <span class="number">2</span>, since a node can be a descendant <span class="keyword">of</span> itself according <span class="keyword">to</span> the LCA definition.</span><br></pre></td></tr></table></figure>
<h3 id="Iterative_solution"><a href="#Iterative_solution" class="headerlink" title="Iterative solution"></a>Iterative solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || p == <span class="keyword">null</span> || q == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="keyword">while</span> ((root.val - p.val) * (root.val - q.val) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            root = p.val &lt; root.val ? root.left : root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Recursive_solution"><a href="#Recursive_solution" class="headerlink" title="Recursive solution"></a>Recursive solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || p == <span class="keyword">null</span> || q == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span> ((root.val - p.val) * (root.val - q.val) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (p.val &lt; root.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> lowestCommonAncestor(root.left, p,q);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lowestCommonAncestor(root.right, p,q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Same_one_line_solution"><a href="#Same_one_line_solution" class="headerlink" title="Same one line solution"></a>Same one line solution</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || p == <span class="keyword">null</span> || q == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> ((root.val - p.val) * (root.val - q.val) &lt;= <span class="number">0</span>) ? root :</span><br><span class="line">        lowestCommonAncestor(p.val &lt; root.val ? root.left : root.right, p, q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Valid Palindrome]]></title>
      <url>http://ninefu.github.io/blog/Valid_Palindrome/</url>
      <content type="html"><![CDATA[<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
<p>Note:<br>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        s = s.toLowerCase();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> cLeft, cRight;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            cLeft = s.charAt(left);</span><br><span class="line">            cRight = s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span> (! Character.isLetterOrDigit(cLeft))&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (! Character.isLetterOrDigit(cRight))&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (cLeft != cRight)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[House Robber]]></title>
      <url>http://ninefu.github.io/blog/House_Robber/</url>
      <content type="html"><![CDATA[<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>
<h3 id="O_28n2_29_space"><a href="#O_28n2_29_space" class="headerlink" title="O(n2) space"></a>O(n<sup>2</sup>) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[num.length + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = num[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp[num.length][<span class="number">0</span>], dp[num.length][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O_28n_29_space"><a href="#O_28n_29_space" class="headerlink" title="O(n) space"></a>O(n) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">2</span>];</span><br><span class="line">        res[<span class="number">0</span>] = res[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; res.length; i++)&#123;</span><br><span class="line">            res[i] = Math.max(res[i - <span class="number">1</span>], (res[i - <span class="number">2</span>] + nums[i - <span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[res.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O_281_29_space"><a href="#O_281_29_space" class="headerlink" title="O(1) space"></a>O(1) space</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> prevNo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> prevYes = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = prevNo;</span><br><span class="line">            prevNo = Math.max(prevNo, prevYes);</span><br><span class="line">            prevYes = n + temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.max(prevNo, prevYes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Product of Array Except Self]]></title>
      <url>http://ninefu.github.io/blog/Product_of_Array_Except_Self/</url>
      <content type="html"><![CDATA[<p>Given an array of n integers where n &gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p>
<p>Solve it without division and in O(n).</p>
<p>For example, given [1,2,3,4], return [24,12,8,6].</p>
<p>Follow up:<br>Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)</p>
<p>Mosted voted solution</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">		<span class="keyword">int</span> n = nums.length;</span><br><span class="line">		<span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">			res[i] = res[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> right = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			res[i] *= right;</span><br><span class="line">			right *= nums[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The product basically is calculated using the numbers before the current number and the numbers after the current number. Thus, we can scan the array twice. First, we calcuate the running product of the part before the current number. Second, we calculate the running product of the part after the current number through scanning from the end of the array.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> runningPrefix = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            res[i] = runningPrefix;</span><br><span class="line">            runningPrefix *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> runningSuffix = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            res[i] *= runningSuffix;</span><br><span class="line">            runningSuffix *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Product Subarray]]></title>
      <url>http://ninefu.github.io/blog/Maximum_Product_Subarray/</url>
      <content type="html"><![CDATA[<p>Find the contiguous subarray within an array (containing at least one number) which has the largest product.</p>
<p>For example, given the array [2,3,-2,4],<br>the contiguous subarray [2,3] has the largest product = 6.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxEndHerePrev = nums[<span class="number">0</span>], minEndHerePrev = nums[<span class="number">0</span>], maxSoFar = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">// interleaving in the following equations</span></span><br><span class="line">        <span class="keyword">int</span> maxEndHere = nums[<span class="number">0</span>], minEndHere = nums[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            maxEndHere = Math.max(nums[i], Math.max(maxEndHerePrev * nums[i], minEndHerePrev * nums[i]));</span><br><span class="line">            minEndHere = Math.min(nums[i], Math.min(maxEndHerePrev * nums[i], minEndHerePrev * nums[i]));</span><br><span class="line">            maxSoFar = Math.max(maxEndHere, maxSoFar);</span><br><span class="line">            maxEndHerePrev = maxEndHere;</span><br><span class="line">            minEndHerePrev = minEndHere;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSoFar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Another solution from this <a href="https://leetcode.com/discuss/14235/possibly-simplest-solution-with-o-n-time-complexity" target="_blank" rel="external">post</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// store the result that is the max we have found so far</span></span><br><span class="line">    <span class="keyword">int</span> r = A[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// imax/imin stores the max/min product of</span></span><br><span class="line">    <span class="comment">// subarray that ends with the current number A[i]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, imax = r, imin = r; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// multiplied by a negative makes big number smaller, small number bigger</span></span><br><span class="line">        <span class="comment">// so we redefine the extremums by swapping them</span></span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt; <span class="number">0</span>)</span><br><span class="line">            swap(imax, imin);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// max/min product for the current number is either the current number itself</span></span><br><span class="line">        <span class="comment">// or the max/min by the previous number times the current one</span></span><br><span class="line">        imax = max(A[i], imax * A[i]);</span><br><span class="line">        imin = min(A[i], imin * A[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the newly computed max value is a candidate for our global result</span></span><br><span class="line">        r = max(r, imax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Subarray]]></title>
      <url>http://ninefu.github.io/blog/Maximum_Subarray/</url>
      <content type="html"><![CDATA[<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>For example, given the array [−2,1,−3,4,−1,2,1,−5,4],<br>the contiguous subarray [4,−1,2,1] has the largest sum = 6.</p>
<h3 id="DP_solution_2C_O_28n_29_time"><a href="#DP_solution_2C_O_28n_29_time" class="headerlink" title="DP solution, O(n) time"></a>DP solution, O(n) time</h3><blockquote>
<p>this problem was discussed by Jon Bentley (Sep. 1984 Vol. 27 No. 9 Communications of the ACM P885)</p>
<p>the paragraph below was copied from his paper (with a little modifications)</p>
<p>algorithm that operates on arrays: it starts at the left end (element A[1]) and scans through to the right end (element A[n]), keeping track of the maximum sum subvector seen so far. The maximum is initially A[0]. Suppose we’ve solved the problem for A[1 .. i - 1]; how can we extend that to A[1 .. i]? The maximum sum in the first I elements is either the maximum sum in the first i - 1 elements (which we’ll call MaxSoFar), or it is that of a subvector that ends in position i (which we’ll call MaxEndingHere).</p>
<p>MaxEndingHere is either A[i] plus the previous MaxEndingHere, or just A[i], whichever is larger.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//dp[i] means the maximum subarray ending with A[i];</span></span><br><span class="line">        dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i] = A[i] + (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> ? dp[i - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxSoFar = nums[<span class="number">0</span>], maxEndHere = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            maxEndHere = Math.max(maxEndHere + nums[i], nums[i]);</span><br><span class="line">            maxSoFar = Math.max(maxSoFar, maxEndHere);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxSoFar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Divide_and_Conquer"><a href="#Divide_and_Conquer" class="headerlink" title="Divide and Conquer"></a>Divide and Conquer</h3><p>From the <a href="https://leetcode.com/discuss/694/how-solve-maximum-subarray-using-divide-and-conquer-approach" target="_blank" rel="external">post</a></p>
<blockquote>
<p>Step1. Select the middle element of the array. So the maximum subarray may contain that middle element or not.</p>
<p>Step 2.1 If the maximum subarray does not contain the middle element, then we can apply the same algorithm to the the subarray to the left of the middle element and the subarray to the right of the middle element.</p>
<p>Step 2.2 If the maximum subarray does contain the middle element, then the result will be simply the maximum suffix subarray of the left subarray plus the maximum prefix subarray of the right subarray</p>
<p>Step 3 return the maximum of those three answer.</p>
<p>The recurrence is: T(n) = 2T(n / 2) + O(1). So the running time of this algorithm is O(n).</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// IMPORTANT: Please reset any member data you declared, as</span></span><br><span class="line">        <span class="comment">// the same Solution instance will be reused for each test case.</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> maxSubArrayHelperFunction(A,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArrayHelperFunction</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right == left) <span class="keyword">return</span> A[left];</span><br><span class="line">        <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftans = maxSubArrayHelperFunction(A, left, middle);</span><br><span class="line">        <span class="keyword">int</span> rightans = maxSubArrayHelperFunction(A, middle+<span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">int</span> leftmax = A[middle];</span><br><span class="line">        <span class="keyword">int</span> rightmax = A[middle+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=middle;i&gt;=left;i--) &#123;</span><br><span class="line">            temp += A[i];</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; leftmax) leftmax = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=middle+<span class="number">1</span>;i&lt;=right;i++) &#123;</span><br><span class="line">            temp += A[i];</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; rightmax) rightmax = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(max(leftans, rightans),leftmax+rightmax);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gas Station]]></title>
      <url>http://ninefu.github.io/blog/Gas_Station/</url>
      <content type="html"><![CDATA[<p>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].</p>
<p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.</p>
<p>Return the starting gas station’s index if you can travel around the circuit once, otherwise return -1.</p>
<p>Note:<br>The solution is guaranteed to be unique.</p>
<p>Explanation:</p>
<ul>
<li>If the sum of gas is smaller than the sum of cost, then there is no solution. Otherwise, there must be a solution</li>
<li>The question guarantees that the solution is unique</li>
<li>The tank should never be negative</li>
<li>If a car from A cannot reach C and C is the first station that A cannot reach, then any station between A and C cannot reach C either. Thus, the car can start from the next station after C.</li>
<li>See <a href="https://leetcode.com/discuss/4159/share-some-of-my-ideas" target="_blank" rel="external">here</a> for proof</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (gas == <span class="keyword">null</span> || cost == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> costSum = <span class="number">0</span>, gasSum = <span class="number">0</span>, index = <span class="number">0</span>, tank = <span class="number">0</span>;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++)&#123;</span><br><span class="line">            costSum += cost[i];</span><br><span class="line">            gasSum += gas[i];</span><br><span class="line">            tank += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span> (tank &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                index = i + <span class="number">1</span>;</span><br><span class="line">                tank = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> costSum &gt; gasSum ? -<span class="number">1</span> : index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rectangle Area]]></title>
      <url>http://ninefu.github.io/blog/Rectangle_Area/</url>
      <content type="html"><![CDATA[<p>Find the total area covered by two rectilinear rectangles in a 2D plane.</p>
<p>Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.</p>
<p>Assume that the total area is never beyond the maximum possible value of int.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">computeArea</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D, <span class="keyword">int</span> E, <span class="keyword">int</span> F, <span class="keyword">int</span> G, <span class="keyword">int</span> H)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = Math.max(A,E), right = Math.max(min(C,G), left);</span><br><span class="line">        <span class="keyword">int</span> bottom = Math.max(B,F), top = Math.max(min(D,H), bottom);</span><br><span class="line">        <span class="keyword">return</span> (C-A)*(D-B) - (right-left)*(top-bottom) + (G-E)*(H-F);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Min Stack]]></title>
      <url>http://ninefu.github.io/blog/Min_Stack/</url>
      <content type="html"><![CDATA[<h3 id="Solutions_with_two_stacks"><a href="#Solutions_with_two_stacks" class="headerlink" title="Solutions with two stacks"></a>Solutions with two stacks</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; nums = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; min = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        nums.push(x);</span><br><span class="line">        <span class="keyword">if</span> (!min.empty() &amp;&amp; min.peek() &lt; x)&#123;</span><br><span class="line">            min.push(min.peek());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            min.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nums.empty() &amp;&amp; !min.empty())&#123;</span><br><span class="line">            nums.pop();</span><br><span class="line">            min.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solutions_with_one_stacks"><a href="#Solutions_with_one_stacks" class="headerlink" title="Solutions with one stacks"></a>Solutions with one stacks</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> min;</span><br><span class="line">    Stack&lt;Long&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.empty())&#123;</span><br><span class="line">            stack.push(<span class="number">0L</span>);</span><br><span class="line">            min = x;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(x - min);</span><br><span class="line">            <span class="keyword">if</span> (x &lt; min)&#123;min = x;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stack.empty())&#123;</span><br><span class="line">            <span class="keyword">long</span> pop = stack.pop();</span><br><span class="line">            <span class="comment">// get the old "min"</span></span><br><span class="line">            <span class="keyword">if</span> (pop &lt; <span class="number">0</span>) min = min - pop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> top = stack.peek();</span><br><span class="line">        <span class="keyword">if</span> (top &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (min + top);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Implement Queue Using Stacks]]></title>
      <url>http://ninefu.github.io/blog/Implement_Queue_using_Stacks/</url>
      <content type="html"><![CDATA[<p>Implement the following operations of a queue using stacks.</p>
<p>push(x) – Push element x to the back of queue.<br>pop() – Removes the element from in front of queue.<br>peek() – Get the front element.<br>empty() – Return whether the queue is empty.</p>
<p>Notes:<br>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.<br>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.<br>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; input = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; output = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Push element x to the back of queue.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        input.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Removes the element from in front of queue.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        peek();</span><br><span class="line">        output.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the front element.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (output.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span> (!input.empty())&#123;</span><br><span class="line">                output.push(input.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return whether the queue is empty.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input.empty() &amp;&amp; output.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Implement Stack Using Queue]]></title>
      <url>http://ninefu.github.io/blog/Implement_Stack_using_Queue/</url>
      <content type="html"><![CDATA[<p>Implement the following operations of a stack using queues.</p>
<p>push(x) – Push element x onto stack.<br>pop() – Removes the element on top of the stack.<br>top() – Get the top element.<br>empty() – Return whether the stack is empty.</p>
<p>Notes:<br>You must use only standard operations of a queue – which means only push to back, peek/pop from front, size, and is empty operations are valid.<br>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.<br>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Push element x onto stack.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        queue.add(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queue.size() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            queue.add(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Removes the element on top of the stack.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the top element.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return whether the stack is empty.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Find Peak Element]]></title>
      <url>http://ninefu.github.io/blog/Find_Peak_Element/</url>
      <content type="html"><![CDATA[<p>A peak element is an element that is greater than its neighbors.</p>
<p>Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.</p>
<p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p>
<p>You may imagine that num[-1] = num[n] = -∞.</p>
<p>For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.</p>
<h3 id="O_28n_29_sequential_scan"><a href="#O_28n_29_sequential_scan" class="headerlink" title="O(n) sequential scan"></a>O(n) sequential scan</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O_28logn_29_iterative_binary_search_solution"><a href="#O_28logn_29_iterative_binary_search_solution" class="headerlink" title="O(logn) iterative binary search solution"></a>O(logn) iterative binary search solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid1 = (high + low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> mid2 = mid1 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid1] &gt; nums[mid2])&#123;</span><br><span class="line">                high = mid1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = mid2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O_28logn_29_recursive_binary_search_solution"><a href="#O_28logn_29_recursive_binary_search_solution" class="headerlink" title="O(logn) recursive binary search solution"></a>O(logn) recursive binary search solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low == high)&#123;</span><br><span class="line">            <span class="keyword">return</span> low;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> mid1 = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> mid2 = mid1 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid1] &gt; nums[mid2])&#123;</span><br><span class="line">                <span class="keyword">return</span> find(nums, low, mid1);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> find(nums, mid2, high);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Words in a String II]]></title>
      <url>http://ninefu.github.io/blog/Reverse_Words_in_a_String_II/</url>
      <content type="html"><![CDATA[<p>Given an input string, reverse the string word by word. A word is defined as a sequence of non-space characters.</p>
<p>The input string does not contain leading or trailing spaces and the words are always separated by a single space.</p>
<p>For example,<br>Given s = “the sky is blue”,<br>return “blue is sky the”.</p>
<p>Could you do it in-place without allocating extra space?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length == <span class="number">0</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> length = s.length;</span><br><span class="line">        <span class="comment">// reverse the entire input</span></span><br><span class="line">        reverse(s, <span class="number">0</span>, length - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// reverse each word</span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">' '</span>)&#123;</span><br><span class="line">                reverse(s, start, j - <span class="number">1</span>);</span><br><span class="line">                start = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// reverse the last word</span></span><br><span class="line">        reverse(s, start, length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length &lt; <span class="number">2</span> || left &gt;= right)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="keyword">char</span>[] s)</span></span>&#123;</span><br><span class="line">        reverseWords(s,<span class="number">0</span>,s.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;i &lt;= s.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==s.length || s[i] == <span class="string">' '</span>)&#123;</span><br><span class="line">                reverseWords(s,j,i-<span class="number">1</span>);</span><br><span class="line">                j = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(begin &lt; end)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s[begin];</span><br><span class="line">            s[begin] = s[end];</span><br><span class="line">            s[end] = c;</span><br><span class="line">            begin++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Words in a String]]></title>
      <url>http://ninefu.github.io/blog/Reverse_Words_in_a_String/</url>
      <content type="html"><![CDATA[<p>Given an input string, reverse the string word by word.</p>
<p>For example,<br>Given s = “the sky is blue”,<br>return “blue is sky the”.</p>
<h3 id="Two_pass_solution"><a href="#Two_pass_solution" class="headerlink" title="Two pass solution"></a>Two pass solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String[] input = s.trim().split(<span class="string">"\\s+"</span>);</span><br><span class="line">        <span class="keyword">int</span> length = input.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (input.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                sb.append(input[i]);</span><br><span class="line">                sb.append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(input[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="One_pass_solution"><a href="#One_pass_solution" class="headerlink" title="One pass solution"></a>One pass solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> end = s.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (end - i &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    sb.append(s.substring(i + <span class="number">1</span>, end));</span><br><span class="line">                    sb.append(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                end = i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;sb.append(s.substring(i, end));&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sb.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flatten 2D Vector]]></title>
      <url>http://ninefu.github.io/blog/Flatten_2D_Vector/</url>
      <content type="html"><![CDATA[<p>Implement an iterator to flatten a 2d vector.</p>
<p>For example,<br>Given 2d vector =</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: <code>[1,2,3,4,5,6]</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector2D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;List&lt;Integer&gt;&gt; it;</span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;Integer&gt; j;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector2D</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; vec2d)</span> </span>&#123;</span><br><span class="line">        it = vec2d.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hasNext();</span><br><span class="line">        <span class="keyword">return</span> j.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((j == <span class="keyword">null</span> || !j.hasNext()) &amp;&amp; it.hasNext())&#123;</span><br><span class="line">            j = it.next().iterator();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j != <span class="keyword">null</span> &amp;&amp; j.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Your Vector2D object will be instantiated and called as such:</span><br><span class="line"> * Vector2D i = new Vector2D(vec2d);</span><br><span class="line"> * while (i.hasNext()) v[f()] = i.next();</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Paint House I & II]]></title>
      <url>http://ninefu.github.io/blog/Paint_House_I_II/</url>
      <content type="html"><![CDATA[<h2 id="Paint_House_I"><a href="#Paint_House_I" class="headerlink" title="Paint House I"></a>Paint House I</h2><p>There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>
<p>The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.</p>
<p>Note:<br>All costs are positive integers.</p>
<p>O(n) time and O(1) space</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; costs.length; i++)&#123;</span><br><span class="line">            costs[i][<span class="number">0</span>] += Math.min(costs[i - <span class="number">1</span>][<span class="number">1</span>], costs[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">1</span>] += Math.min(costs[i - <span class="number">1</span>][<span class="number">0</span>], costs[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">2</span>] += Math.min(costs[i - <span class="number">1</span>][<span class="number">0</span>], costs[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = costs.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.min(costs[n][<span class="number">0</span>], Math.min(costs[n][<span class="number">1</span>],costs[n][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// starting from the second house/row, costs[i][0] represents the cost of painting this house red plus the previous house, etc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = costs.length, r = <span class="number">0</span>, b = <span class="number">0</span>, g = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> rr = r, bb = b, gg = g;</span><br><span class="line">            r = costs[i][<span class="number">0</span>] + Math.min(bb, gg);</span><br><span class="line">            g = costs[i][<span class="number">1</span>] + Math.min(rr, bb);</span><br><span class="line">            b = costs[i][<span class="number">2</span>] + Math.min(rr, gg);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.min(r, Math.min(g, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Paint_House_II"><a href="#Paint_House_II" class="headerlink" title="Paint House II"></a>Paint House II</h2><p>The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on… Find the minimum cost to paint all houses. Could you solve it in O(nk) runtime?</p>
<h3 id="O_uFF08nk2_uFF09solution"><a href="#O_uFF08nk2_uFF09solution" class="headerlink" title="O（nk2）solution"></a>O（nk<sup>2</sup>）solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = costs.length, numColor = costs[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] totalCosts = <span class="keyword">new</span> <span class="keyword">int</span>[length + <span class="number">1</span>][numColor];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numColor; j++)&#123;</span><br><span class="line">            totalCosts[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; numColor; m++)&#123;</span><br><span class="line">                <span class="comment">// costs of paint the ith house with color m + the previous house</span></span><br><span class="line">                <span class="keyword">int</span> prevMin = getMin(totalCosts, numColor, i - <span class="number">1</span>, m);</span><br><span class="line">                totalCosts[i][m] = costs[i - <span class="number">1</span>][m] + prevMin;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> getMin(totalCosts, numColor, length, numColor + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[][] totalCosts, <span class="keyword">int</span> numColor, <span class="keyword">int</span> prevHouse, <span class="keyword">int</span> currentColor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numColor; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == currentColor &amp;&amp; i == <span class="number">0</span> &amp;&amp; numColor - <span class="number">1</span> == currentColor)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == currentColor)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                min = Math.min(totalCosts[prevHouse][i], min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O_28nk_29_solution"><a href="#O_28nk_29_solution" class="headerlink" title="O(nk) solution"></a>O(nk) solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = costs.length, k = costs[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> min1 = -<span class="number">1</span>, min2 = -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> last1 = min1, last2 = min2;</span><br><span class="line">            min1 = -<span class="number">1</span>; min2 = -<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j != last1)&#123;</span><br><span class="line">                    <span class="comment">//current color j is different to last min1</span></span><br><span class="line">                    costs[i][j] += last1 &lt; <span class="number">0</span> ? <span class="number">0</span> : costs[i - <span class="number">1</span>][last1];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    costs[i][j] += last2 &lt; <span class="number">0</span> ? <span class="number">0</span> : costs[i - <span class="number">1</span>][last2];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//update min value index</span></span><br><span class="line">                <span class="keyword">if</span> (min1 &lt; <span class="number">0</span> || costs[i][j] &lt; costs[i][min1])&#123;</span><br><span class="line">                    min2 = min1;</span><br><span class="line">                    min1 = j;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (min2 &lt; <span class="number">0</span> || costs[i][j] &lt; costs[i][min2])&#123;</span><br><span class="line">                    min2 = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> costs[n - <span class="number">1</span>][min1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Common Prefix]]></title>
      <url>http://ninefu.github.io/blog/Longest_Common_Prefix/</url>
      <content type="html"><![CDATA[<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(strs);</span><br><span class="line">        <span class="keyword">char</span>[] first = strs[<span class="number">0</span>].toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] last = strs[strs.length - <span class="number">1</span>].toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; first.length &amp;&amp; i &lt; last.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first[i] == last[i])&#123;</span><br><span class="line">                result.append(first[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        String pre = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; strs.length)&#123;</span><br><span class="line">            <span class="keyword">while</span>(strs[i].indexOf(pre) != <span class="number">0</span>)</span><br><span class="line">                pre = pre.substring(<span class="number">0</span>,pre.length()-<span class="number">1</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="brute_force"><a href="#brute_force" class="headerlink" title="brute force"></a>brute force</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length &lt; <span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">        </span><br><span class="line">        String res = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++)&#123;</span><br><span class="line">            res = common(res, strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">common</span><span class="params">(String s, String p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || p == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() &amp;&amp; i &lt; p.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == p.charAt(i))&#123;</span><br><span class="line">                sb.append(s.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Roman to Integer]]></title>
      <url>http://ninefu.github.io/blog/Roman_to_Integer/</url>
      <content type="html"><![CDATA[<p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span>[] values = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        values[<span class="string">'I'</span> - <span class="string">'A'</span>] = <span class="number">1</span>;</span><br><span class="line">        values[<span class="string">'V'</span> - <span class="string">'A'</span>] = <span class="number">5</span>;</span><br><span class="line">        values[<span class="string">'X'</span> - <span class="string">'A'</span>] = <span class="number">10</span>;</span><br><span class="line">        values[<span class="string">'L'</span> - <span class="string">'A'</span>] = <span class="number">50</span>;</span><br><span class="line">        values[<span class="string">'C'</span> - <span class="string">'A'</span>] = <span class="number">100</span>;</span><br><span class="line">        values[<span class="string">'D'</span> - <span class="string">'A'</span>] = <span class="number">500</span>;</span><br><span class="line">        values[<span class="string">'M'</span> - <span class="string">'A'</span>] = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, prev = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = values[c - <span class="string">'A'</span>];</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; prev)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cur / prev &gt; <span class="number">10</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">                res -= <span class="number">2</span> * prev;</span><br><span class="line">            &#125;</span><br><span class="line">            res += cur;</span><br><span class="line">            prev = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The first solution is much faster than using a HashMap</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; values = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        values.put(<span class="string">'I'</span>,<span class="number">1</span>);</span><br><span class="line">        values.put(<span class="string">'V'</span>,<span class="number">5</span>);</span><br><span class="line">        values.put(<span class="string">'X'</span>,<span class="number">10</span>);</span><br><span class="line">        values.put(<span class="string">'L'</span>,<span class="number">50</span>);</span><br><span class="line">        values.put(<span class="string">'C'</span>,<span class="number">100</span>);</span><br><span class="line">        values.put(<span class="string">'D'</span>,<span class="number">500</span>);</span><br><span class="line">        values.put(<span class="string">'M'</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, prev = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = values.get(c);</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; prev)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cur / prev &gt; <span class="number">10</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">                res -= <span class="number">2</span> * prev;</span><br><span class="line">            &#125;</span><br><span class="line">            res += cur;</span><br><span class="line">            prev = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Container With Most Water]]></title>
      <url>http://ninefu.github.io/blog/Container_With_Most_Water/</url>
      <content type="html"><![CDATA[<p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<a id="more"></a>
<p>Note: You may not slant the container.</p>
<p>Explanation of this solution: <a href="https://leetcode.com/discuss/11482/yet-another-way-to-see-what-happens-in-the-o-n-algorithm" target="_blank" rel="external">post</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length &lt; <span class="number">2</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = height.length - <span class="number">1</span>, max = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            max = Math.max(max, (right - left) * Math.min(height[left], height[right]));</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right])&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Regular Expression Matching]]></title>
      <url>http://ninefu.github.io/blog/Regular_Expression_Matching/</url>
      <content type="html"><![CDATA[<p>Implement regular expression matching with support for ‘.’ and ‘*’.</p>
<a id="more"></a>
<p>‘.’ Matches any single character.</p>
<p>‘*’ Matches zero or more of the preceding element.</p>
<p>The matching should cover the entire input string (not partial).</p>
<p>The function prototype should be:<br>bool isMatch(const char <em>s, const char </em>p)</p>
<p>Some examples:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"a"</span>)</span></span> → false</span><br><span class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>,<span class="string">"aa"</span>)</span></span> → true</span><br><span class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aaa"</span>,<span class="string">"aa"</span>)</span></span> → false</span><br><span class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">"a*"</span>)</span></span> → true</span><br><span class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aa"</span>, <span class="string">".*"</span>)</span></span> → true</span><br><span class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"ab"</span>, <span class="string">".*"</span>)</span></span> → true</span><br><span class="line"><span class="function"><span class="title">isMatch</span><span class="params">(<span class="string">"aab"</span>, <span class="string">"c*a*b"</span>)</span></span> → true</span><br></pre></td></tr></table></figure>
<h3 id="DP_solution"><a href="#DP_solution" class="headerlink" title="DP solution"></a>DP solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * match[i][j]: if s[0...i-1] matches p[0...j-1]</span><br><span class="line">	 * if p[j-1] != '*':</span><br><span class="line">	 *     match[i][j] = match[i-1][j-1] &amp;&amp; s[i-1] = p[j-1]</span><br><span class="line">	 * if p[j-1] == '*', denote x = p[j-2]:</span><br><span class="line">	 *     match[i][j] is true iff meets one of the following:</span><br><span class="line">	 *         "x*" repeats 0 time and matches empty: match[i][j-2]</span><br><span class="line">	 *         "x*" repeats &gt;= 1 time and matches "x*x": s[i-1] == x &amp;&amp; match[i-1][j]</span><br><span class="line">	**/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> s == <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> pLength = p.length(), sLength = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] match = <span class="keyword">new</span> <span class="keyword">boolean</span>[sLength + <span class="number">1</span>][pLength + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//initialize</span></span><br><span class="line">        match[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// the first for loop can be omited since boolean array </span></span><br><span class="line">        <span class="comment">// is initialized to false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sLength; i++)&#123;</span><br><span class="line">            match[i][<span class="number">0</span>] = <span class="keyword">false</span>; <span class="comment">// always false between null and any non-null character</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pLength; j++)&#123;</span><br><span class="line">            match[<span class="number">0</span>][j] = (j &gt; <span class="number">1</span> &amp;&amp; p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span> &amp;&amp; match[<span class="number">0</span>][j - <span class="number">2</span>]); <span class="comment">// "s" and "x*" return true</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sLength; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pLength; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) != <span class="string">'*'</span>)&#123;</span><br><span class="line">                    match[i][j] = match[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; charMatch(s.charAt(i - <span class="number">1</span>), p.charAt(j - <span class="number">1</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    match[i][j] = match[i][j - <span class="number">2</span>] || (charMatch(s.charAt(i - <span class="number">1</span>), p.charAt(j - <span class="number">2</span>)) &amp;&amp; match[i - <span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> match[sLength][pLength];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">charMatch</span><span class="params">(<span class="keyword">char</span> s, <span class="keyword">char</span> p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p == <span class="string">'.'</span> || s == p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Recursive_solution"><a href="#Recursive_solution" class="headerlink" title="Recursive solution"></a>Recursive solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.isEmpty())&#123;<span class="keyword">return</span> s.isEmpty();&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p.length() == <span class="number">1</span> || p.charAt(<span class="number">1</span>) != <span class="string">'*'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.isEmpty() || !charMatch(s.charAt(<span class="number">0</span>), p.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> isMatch(s.substring(<span class="number">1</span>),p.substring(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// p.length() &gt; 1 &amp;&amp; p.charAt(1) == '*'</span></span><br><span class="line">        <span class="keyword">while</span>(!s.isEmpty() &amp;&amp; charMatch(s.charAt(<span class="number">0</span>), p.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">            <span class="keyword">if</span> (isMatch(s, p.substring(<span class="number">2</span>)))&#123;<span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">            s = s.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> isMatch(s, p.substring(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">charMatch</span><span class="params">(<span class="keyword">char</span> s, <span class="keyword">char</span> p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p == <span class="string">'.'</span> || p == s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigZag Conversion]]></title>
      <url>http://ninefu.github.io/blog/ZigZag_Conversion/</url>
      <content type="html"><![CDATA[<p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<a id="more"></a>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   <span class="keyword">H</span>   <span class="keyword">N</span></span><br><span class="line">A P <span class="keyword">L</span> S I I <span class="keyword">G</span></span><br><span class="line">Y   I   <span class="literal">R</span></span><br></pre></td></tr></table></figure>
<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> text, <span class="keyword">int</span> nRows)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>convert(&quot;PAYPALISHIRING&quot;, 3)</code> should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>
<h3 id="My_solution"><a href="#My_solution" class="headerlink" title="My solution"></a>My solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">2</span> || numRows &lt; <span class="number">2</span>)&#123;<span class="keyword">return</span> s;&#125;</span><br><span class="line">        <span class="keyword">int</span> numCols = (s.length() / (numRows + numRows - <span class="number">2</span>) + <span class="number">1</span>) * (<span class="number">1</span> + numRows - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[][] grids = <span class="keyword">new</span> <span class="keyword">char</span>[numRows][numCols];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> row = i % (numRows + numRows - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> col = i / (numRows + numRows - <span class="number">2</span>) * (<span class="number">1</span> + numRows - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (row &gt;= numRows)&#123;</span><br><span class="line">                col += row % (numRows - <span class="number">1</span>);</span><br><span class="line">                row = (numRows - <span class="number">1</span> - row) + numRows - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            grids[row][col] = s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuffer res = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grids.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grids[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grids[i][j] != <span class="string">'\u0000'</span>)&#123;res.append(grids[i][j]);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Most_voted_and_much_faster_solution_on_Leetcode"><a href="#Most_voted_and_much_faster_solution_on_Leetcode" class="headerlink" title="Most voted and much faster solution on Leetcode"></a>Most voted and much faster <a href="https://leetcode.com/discuss/10493/easy-to-understand-java-solution" target="_blank" rel="external">solution</a> on Leetcode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">char</span>[] letter = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> length = letter.length;</span><br><span class="line">        StringBuffer[] sb = <span class="keyword">new</span> StringBuffer[numRows];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length; i++)&#123;</span><br><span class="line">            sb[i] = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; length)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; pos &lt; numRows &amp;&amp; i &lt; length; pos++)&#123;</span><br><span class="line">                sb[pos].append(letter[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> pos = numRows - <span class="number">2</span>; pos &gt; <span class="number">0</span> &amp;&amp; i &lt; length; pos--)&#123;</span><br><span class="line">                sb[pos].append(letter[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; numRows; j++)&#123;</span><br><span class="line">            sb[<span class="number">0</span>].append(sb[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb[<span class="number">0</span>].toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to Design the Backend of WeChat]]></title>
      <url>http://ninefu.github.io/blog/WeChat/</url>
      <content type="html"><![CDATA[<p>Notes from Tiger’s Lecture</p>
<h1 id="How_to_communicate_between_two_users_3F"><a href="#How_to_communicate_between_two_users_3F" class="headerlink" title="How to communicate between two users?"></a>How to communicate between two users?</h1><p>Client Server model</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User <span class="number">1</span> &lt;== connection ==&gt; User <span class="number">2</span></span><br><span class="line"></span><br><span class="line">(How <span class="keyword">to</span> know where <span class="keyword">is</span> the other guy? TCP/IP. But how <span class="keyword">to</span> know the IP address? ===&gt; server. <span class="keyword">If</span> there <span class="keyword">is</span> no server,  we can <span class="keyword">use</span> MAC. Why <span class="keyword">use</span> IP instead <span class="keyword">of</span> MAC? MAC地址可以修改， 同时没有搭配的协议栈. <span class="keyword">If</span> there <span class="keyword">is</span> no server <span class="keyword">or</span> IP, <span class="keyword">use</span> P2P.)</span><br></pre></td></tr></table></figure>
<h3 id="How_to_connect"><a href="#How_to_connect" class="headerlink" title="How to connect"></a>How to connect</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A  &lt;==&gt; B </span><br><span class="line"></span><br><span class="line">mail <span class="built_in">mode</span><span class="variable">l:</span> short connection</span><br><span class="line">phone <span class="built_in">mode</span><span class="variable">l:</span> persistent connection （每个 router 都记录 A-B 的路径，不需要每次都传递具体通信的 meta 信息）</span><br></pre></td></tr></table></figure>
<h3 id="Could_we_build_WeChat_without_Server"><a href="#Could_we_build_WeChat_without_Server" class="headerlink" title="Could we build WeChat without Server"></a>Could we build WeChat without Server</h3><h3 id="How_to_save_traffic"><a href="#How_to_save_traffic" class="headerlink" title="How to save traffic"></a>How to save traffic</h3><ol>
<li>user persistent connection</li>
<li>P2P 不稳定 &amp; 法律监管 &amp; 带宽环境变好</li>
<li>批量压缩</li>
<li>web socket in http</li>
</ol>
<p>pull push model 消息延迟加载，先推送新消息的计数，等打开 app 才刷新消息的具体内容，如果消息多的话还可以压缩以便进一笔节省流量</p>
<h3 id="What_data_need_to_be_save_in_client"><a href="#What_data_need_to_be_save_in_client" class="headerlink" title="What data need to be save in client"></a>What data need to be save in client</h3><ol>
<li>message</li>
<li>account</li>
<li>contacts</li>
</ol>
<h3 id="Sync_between_two_clients__28mobile/desktop_29"><a href="#Sync_between_two_clients__28mobile/desktop_29" class="headerlink" title="Sync between two clients (mobile/desktop)"></a>Sync between two clients (mobile/desktop)</h3><p>timestamp，但是用户的时间可能是错的，所以用逻辑时钟/版本号<br>user pull version or server push</p>
<h1 id="How_to_build_API"><a href="#How_to_build_API" class="headerlink" title="How to build API"></a>How to build API</h1><p>Scenario</p>
<ol>
<li>send message</li>
<li>account</li>
<li>read message</li>
<li>红包</li>
<li>log in/out</li>
<li>朋友圈</li>
<li>location</li>
</ol>
<p>=&gt; chat, account, feed</p>
<p>client ==&gt; 顶层业务 API ==&gt; 逻辑 API / DATA API （可并行串行，微信用并行） ==&gt; DATA</p>
<h3 id="How_to_communicate_between_services_3F"><a href="#How_to_communicate_between_services_3F" class="headerlink" title="How to communicate between services?"></a>How to communicate between services?</h3><p>common gate way interface</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">API</span><br><span class="line">||</span><br><span class="line">||</span><br><span class="line"><span class="string">\/</span></span><br><span class="line">a large container determines which <span class="built_in">module</span> should API go <span class="keyword">to</span></span><br><span class="line"></span><br><span class="line">缺点：耦合，单点故障，连带效应（故障/升级）</span><br></pre></td></tr></table></figure>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Micro service</span><br><span class="line">底下的服务每个都提供一个 http 接口，每个都是独立的，在 <span class="keyword">master</span> <span class="title">那里注册一下，多个 master</span>。每个都是单独的进程</span><br></pre></td></tr></table></figure>
<h3 id="How_to_support_QQ_message"><a href="#How_to_support_QQ_message" class="headerlink" title="How to support QQ message"></a>How to support QQ message</h3><h3 id="How_to_support_group_chat"><a href="#How_to_support_group_chat" class="headerlink" title="How to support group chat"></a>How to support group chat</h3><p>异步 RPC<br>disruptor</p>
<p>设计广播/feed模式</p>
<p>假设群内有 u1 u2 u3，群发就是 u1-u2,u1-u3,…,etc，而不是 u1-channel （逻辑复杂），微信群设人数上限</p>
<h3 id="How_to_configure_API"><a href="#How_to_configure_API" class="headerlink" title="How to configure API"></a>How to configure API</h3><h1 id="How_to_store_data"><a href="#How_to_store_data" class="headerlink" title="How to store data"></a>How to store data</h1><ol>
<li>message</li>
<li>account</li>
<li>contacts</li>
</ol>
<h3 id="Should_we_save_them_together"><a href="#Should_we_save_them_together" class="headerlink" title="Should we save them together"></a>Should we save them together</h3><h3 id="What_is_the_key"><a href="#What_is_the_key" class="headerlink" title="What is the key"></a>What is the key</h3><ol>
<li>message, NoSQL</li>
<li>account, SQL</li>
<li>contacts, SQL</li>
</ol>
<h3 id="Why_do_we_need_memory"><a href="#Why_do_we_need_memory" class="headerlink" title="Why do we need memory"></a>Why do we need memory</h3><p>在内存里进行复杂的 join 等操作</p>
<h3 id="Is_one_data_center_enough"><a href="#Is_one_data_center_enough" class="headerlink" title="Is one data center enough"></a>Is one data center enough</h3><p>容灾</p>
<h3 id="How_to_monitor_the_number_of_registered_users"><a href="#How_to_monitor_the_number_of_registered_users" class="headerlink" title="How to monitor the number of registered users"></a>How to monitor the number of registered users</h3><p>MySQL count</p>
<h3 id="How_to_monitor_the_number_of_online_users"><a href="#How_to_monitor_the_number_of_online_users" class="headerlink" title="How to monitor the number of online users"></a>How to monitor the number of online users</h3><p>log,上线了就+1离线了就-1，注意掉线的情况</p>
<h3 id="How_to_notify_the_numbers_to_team"><a href="#How_to_notify_the_numbers_to_team" class="headerlink" title="How to notify the numbers to team"></a>How to notify the numbers to team</h3><h3 id="What_are_the_steps_for_log"><a href="#What_are_the_steps_for_log" class="headerlink" title="What are the steps for log"></a>What are the steps for log</h3><p>分布式 log</p>
<ol>
<li>log统计代码</li>
<li>保存在本地或者发送到 log server 上 （每台机器上有个进程专门处理 lock，加减等操作）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remove Duplicates From Sorted Array II]]></title>
      <url>http://ninefu.github.io/blog/Remove_Duplicates_from_Sorted_Array_II/</url>
      <content type="html"><![CDATA[<p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p>
<a id="more"></a>
<p>For example,<br>Given sorted array nums = [1,1,1,2,2,3],</p>
<p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn’t matter what you leave beyond the new length.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">2</span> || num &gt; nums[index - <span class="number">2</span>])&#123;</span><br><span class="line">                nums[index++] = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Extension_to_all_duplicates_at_most_K_times"><a href="#Extension_to_all_duplicates_at_most_K_times" class="headerlink" title="Extension to all duplicates at most K times"></a>Extension to all duplicates at most K times</h3><p>From Leetcode <a href="https://leetcode.com/discuss/22584/share-time-and-solution-when-duplicates-allowed-most-times" target="_blank" rel="external">post</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= k) <span class="keyword">return</span> n;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (A[j] != A[j-<span class="number">1</span>]) &#123;</span><br><span class="line">			cnt = <span class="number">1</span>;</span><br><span class="line">			A[i++] = A[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (cnt &lt; k) &#123;</span><br><span class="line">			A[i++] = A[j];</span><br><span class="line">			cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		++j;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remove Duplicates From Sorted Array]]></title>
      <url>http://ninefu.github.io/blog/Remove_Duplicates_from_Sorted_Array/</url>
      <content type="html"><![CDATA[<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<a id="more"></a>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> once = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>])&#123;</span><br><span class="line">                nums[once] = nums[i];</span><br><span class="line">                once++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> once;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || n &gt; nums[i-<span class="number">1</span>])</span><br><span class="line">            nums[i++] = n;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Interview Questions]]></title>
      <url>http://ninefu.github.io/blog/Java_Interview_Questions/</url>
      <content type="html"><![CDATA[<p>未整理</p>
<h3 id="what_u2019s_the_difference_between_interface_and_abstract_3F"><a href="#what_u2019s_the_difference_between_interface_and_abstract_3F" class="headerlink" title="what’s the difference between interface and abstract?"></a>what’s the difference between interface and abstract?</h3><ul>
<li>Abstract classes can have constants, members, method stubs (methods without a body) and defined methods, whereas interfaces can only have constants and methods stubs.</li>
<li>Methods and members of an abstract class can be defined with any visibility, whereas all methods of an interface must be defined as public (they are defined public by default).</li>
<li>Variables declared in a Java interface is by default final. An abstract class may contain non-final variables. </li>
<li>When inheriting an abstract class, a concrete child class must define the abstract methods, whereas an an abstract class can extend another abstract class and abstract methods from the parent class don’t have to be defined.</li>
<li>Similarly, an interface extending another interface is not responsible for implementing methods from the parent interface. This is because interfaces cannot define any implementation.</li>
<li>A child class can only extend a single class (abstract or concrete), whereas an interface can extend or a class can implement multiple other interfaces.</li>
<li>A child class can define abstract methods with the same or less restrictive visibility, whereas a class implementing an interface must define the methods with the exact same visibility (public).</li>
</ul>
<h3 id="interface_/_implements"><a href="#interface_/_implements" class="headerlink" title="interface / implements"></a>interface / implements</h3><p>解释一下interface以及其内部结构；interface里面可以有变量和常量，接口内部全是public<br>An interface is an empty shell, there are only constants and the signatures of the methods, which implies that the methods do not have a body. It’s just a pattern. An interface is similar to an abstract class; indeed interfaces occupy the same namespace as classes and abstract classes. For that reason, you cannot define an interface with the same name as a class. An interface is a fully abstract class。</p>
<h3 id="abstract_in_Java_/_extends"><a href="#abstract_in_Java_/_extends" class="headerlink" title="abstract in Java / extends"></a>abstract in Java / extends</h3><p>Abstract classes, unlike interfaces, are classes. you can define a method for them. An abstract class is a class that is only partially implemented by the programmer. It may contain one or more abstract methods. An abstract method is simply a function definition that serves to tell the programmer that the method must be implemented in a child class.</p>
<h3 id="Recursion_3A_a_way_to_travers_tree"><a href="#Recursion_3A_a_way_to_travers_tree" class="headerlink" title="Recursion: a way to travers tree"></a>Recursion: a way to travers tree</h3><p>what’s recursion? a method where the solution to a problem depends on solutions to smaller instances of the same problem (as opposed to iteration).</p>
<p>举个例子: N! = N × (N-1) × (N-2) × … × 2 × 1. N! is easy to compute with a for loop, but an even easier method in Factorial.java is to use the following recursive function:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123; </span><br><span class="line">   <span class="keyword">if</span> (N == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">   <span class="keyword">return</span> <span class="function">N * <span class="title">factorial</span><span class="params">(N-<span class="number">1</span>)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>The base case returns a value without making any subsequent recursive calls. It does this for one or more special input values for which the function can be evaluated without recursion. For factorial(), the base case is N = 1. </li>
<li>The reduction step is the central part of a recursive function. It relates the function at one (or more) inputs to the function evaluated at one (or more) other inputs. Furthermore, the sequence of parameter values must converge to the base case. For factorial(), the reduction step is N * factorial(N-1) and N decreases by one for each call, so the sequence of parameter values converges to the base case of N = 1</li>
</ul>
<p>以及什么情况下停止: 到底层的base case</p>
<p>recursion有什么要注意的？有什么坏处: </p>
<ul>
<li>Missing base case; </li>
<li>No guarantee of convergence; </li>
<li>Excessive space requirements: Java needs to keep track of each recursive call to implement the function abstraction as expected. If a function calls itself recursively an excessive number of times before returning, the space required by Java for this task may be prohibitive. </li>
<li>Excessive recomputation</li>
</ul>
<h3 id="what_u2019s_transient_3F"><a href="#what_u2019s_transient_3F" class="headerlink" title="what’s transient?"></a>what’s transient?</h3><p>transient is a Java keyword which marks a member variable not to be serialized when it is persisted to streams of bytes. When an object is transferred through the network, the object needs to be ‘serialized’. Serialization converts the object state to serial bytes. Those bytes are sent over the network and the object is recreated from those bytes. Member variables marked by the java transient keyword are not transferred; they are lost intentionally.</p>
<h3 id="what_u2019s_volatile_3F"><a href="#what_u2019s_volatile_3F" class="headerlink" title="what’s volatile?"></a>what’s volatile?</h3><p>It guarantees visibility of changes to variables across threads. This implies that every thread accessing a volatile field will read its current value before continuing, instead of (potentially) using a cached value. </p>
<p>Each thread may copy the variables into the CPU cache of different CPUs. If the counter variable is not declared volatile there is no guarantee about when the value of the counter variable is written from the CPU cache back to main memory. This means, that the counter variable value in the CPU cache may not be the same as in main memory. </p>
<p>if two threads are both reading and writing to a shared variable, then using the volatile keyword for that is not enough. As soon as a thread needs to first read the value of a volatile variable, and based on that value generate a new value for the shared volatile variable, a volatile variable is no longer enough to guarantee correct visibility. The short time gap in between the reading of the volatile variable and the writing of its new value, creates an race condition where multiple threads might read the same value of the volatile variable, generate a new value for the variable, and when writing the value back to main memory - overwrite each other’s values.</p>
<h3 id="thread_implements_runnable"><a href="#thread_implements_runnable" class="headerlink" title="thread implements runnable"></a>thread implements runnable</h3><p>A thread is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently. There are two ways to create a new thread of execution. </p>
<p>One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started. </p>
<p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started. </p>
<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>The static keyword in Java means that the variable or function is shared between all instances of that class as it belongs to the type, not the actual objects themselves. It can be used without instantiating an object. you don’t have to have an instance of the class to use the method.<br>final: stop value change (variable and parameter), method overriding (method) and inheritance (class)</p>
<h3 id="HashTable_u548CHashMap_u5BF9_u4E8E_u5904_u7406collision_u7684_u673A_u5236_3A_pros_and_cons"><a href="#HashTable_u548CHashMap_u5BF9_u4E8E_u5904_u7406collision_u7684_u673A_u5236_3A_pros_and_cons" class="headerlink" title="HashTable和HashMap对于处理collision的机制: pros and cons"></a>HashTable和HashMap对于处理collision的机制: pros and cons</h3><p>hash table: multi thread safe<br>A hash function maps keys to positions in the hash table. Collision: maps two keys to the same position</p>
<ul>
<li>Linear probing: If position p contains a different key, then examine positions p+1, p+2, etc.* until an empty position is found and insert k there/ or the key is found. If we remove a key, we may not be able to find a key after the removed key.</li>
<li>HashMap and HashSet use chained hashing. Average search time (1 + 1/(1-α)) / 2 using linear probing*.  1 + α/2 using chained hashing. This tends to produce clustering —long sequences of non-null elements. This is because two Strings that hash to k and k+1 use almost the same probe sequence. </li>
<li>Quadratic probing: then examine positions p+1^2, p+2^2. a more efficient algorithm in a closed hash table, since it better avoids the clustering problem that can occur with linear probing, although it is not immune. It also provides good memory caching because it preserves some locality of reference; however, linear probing has greater locality and, thus, better cache performance. Should not exceed half full. This has been shown to remove the “primary clustering” that happens with linear probing. However, Strings that hash to the same value k still use the same sequence of probes. size of the array to be prime</li>
<li>Double hashing: Like linear probing, it uses one hash value as a starting point and then repeatedly steps forward an interval until the desired value is located, an empty location is reached, or the entire table has been searched; but this interval is decided using a second, independent hash function (hence the name double hashing). Unlike linear probing and quadratic probing, the interval depends on the data, so that even values mapping to the same location have different bucket sequences; this minimizes repeated collisions and the effects of clustering. </li>
<li>Linear probing and, to a lesser extent, quadratic probing are able to take advantage of the data cache by accessing locations that are close together. Double hashing has, on average, larger intervals and is not able to achieve this advantage.<h3 id="implement_hashtable_2C_HashMap"><a href="#implement_hashtable_2C_HashMap" class="headerlink" title="implement hashtable, HashMap"></a>implement hashtable, HashMap</h3></li>
</ul>
<h3 id="u5BF9HashMap_u7684_u7406_u89E3"><a href="#u5BF9HashMap_u7684_u7406_u89E3" class="headerlink" title="对HashMap的理解"></a>对HashMap的理解</h3><p>based on hash table, initial capacity (16, number of buckets), load factor (0.75 how full the hash table is allowed to get before its capacity is automatically increased). When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. Map m = Collections.synchronizedMap(new HashMap(…));</p>
<p>The iterators returned by all of this class’s “collection view methods” are fail-fast: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator’s own remove method, the iterator will throw a ConcurrentModificationException.<br>clear(), clone(), containsKey(), containsValue(), Set<map.entry<k,v>&gt; = entrySet(), get(), isEmpty(), keySet(), put(key,value), putAll(Map&lt;? extends K,? extends V&gt; m), remove(Object key), size(), values()</map.entry<k,v></p>
<h3 id="iterator_3A_Thread_safe-_hasNext_28_29_2C_next_28_29_2C_remove_28_29_2C_allow_the_caller_to_remove_elements_from_the_underlying_collection_during_the_iteration_with_well-defined_semantics"><a href="#iterator_3A_Thread_safe-_hasNext_28_29_2C_next_28_29_2C_remove_28_29_2C_allow_the_caller_to_remove_elements_from_the_underlying_collection_during_the_iteration_with_well-defined_semantics" class="headerlink" title="iterator: Thread safe. hasNext(), next(), remove(),  allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics."></a>iterator: Thread safe. hasNext(), next(), remove(),  allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.</h3><ul>
<li>Enumeration: hasMoreElements(), nextElement(), No remove()</li>
</ul>
<h3 id="for_loop_u548Cfor-each_loop_u7684_u533A_u522B"><a href="#for_loop_u548Cfor-each_loop_u7684_u533A_u522B" class="headerlink" title="for loop和for-each loop的区别"></a>for loop和for-each loop的区别</h3><pre><code>For each: Designed specifically for iterating over arrays and collections.
        Array: still using index.
        Collections and objects that implements the Iterator interface, then use Iterator
        if you need to use i.remove(); in your loop, or access the actual iterator in some way, you cannot use the for( : ) idiom, since the actual Iterator is merely inferred.
For loop: use index
</code></pre><h3 id="u6570_u636E_u5E93_u7684left-outer_join"><a href="#u6570_u636E_u5E93_u7684left-outer_join" class="headerlink" title="数据库的left-outer join"></a>数据库的left-outer join</h3><p>It preserves the unmatched rows from the first (left) table, joining them with a NULL row in the shape of the second (right) table</p>
<h3 id="Java_u91CCGenerics"><a href="#Java_u91CCGenerics" class="headerlink" title="Java里Generics"></a>Java里Generics</h3><p>（They allow “a type or method to operate on objects of various types while providing compile-time type safety.”）</p>
<ul>
<li>Stronger type checks at compile time.</li>
<li>No more cast. The compiler can now check the type correctness of the program at compile-time. improved readability and robustness</li>
<li>wildcard: &lt;?&gt; unknown. Cannot add(), but can get() objects</li>
<li>Bounded wildcard: public void drawAll(List&lt;? extends Shape&gt; shapes)</li>
<li>Enabling programmers to implement generic algorithms that work on collections of different types.</li>
</ul>
<h3 id="u6BD4_u8F83inheritance_u548Ccomposition"><a href="#u6BD4_u8F83inheritance_u548Ccomposition" class="headerlink" title="比较inheritance和composition"></a>比较inheritance和composition</h3><p>Composition: using instance variables that are references to other objects. In a composition relationship, the front-end class holds a reference in one of its instance variables to a back-end class. Reuse code. provides stronger encapsulation. because a change to a back-end class needn’t break any code that relies only on the front-end class. </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Fruit fruit = <span class="keyword">new</span> Fruit();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Inheritance: subclass extends the superclass. dynamic binding and polymorphism. inheritance helps make code easier to change if the needed change involves adding a new subclass. reuse superclass code. provide “weak encapsulation,” Make sure inheritance models the is-a relationship</p>
<p>With inheritance, a subclass automatically inherits an implemenation of any non-private superclass method that it doesn’t override. With composition, by contrast, the front-end class must explicitly invoke a corresponding method in the back-end class from its own implementation of the method. This explicit call is sometimes called “forwarding” or “delegating” the method invocation to the back-end object.</p>
<ul>
<li>It is easier to change the interface of a back-end class (composition) than a superclass (inheritance). As the previous example illustrated, a change to the interface of a back-end class necessitates a change to the front-end class implementation, but not necessarily the front-end interface. Code that depends only on the front-end interface still works, so long as the front-end interface remains the same. By contrast, a change to a superclass’s interface can not only ripple down the inheritance hierarchy to subclasses, but can also ripple out to code that uses just the subclass’s interface.</li>
<li>It is easier to change the interface of a front-end class (composition) than a subclass (inheritance). Just as superclasses can be fragile, subclasses can be rigid. You can’t just change a subclass’s interface without making sure the subclass’s new interface is compatible with that of its supertypes. For example, you can’t add to a subclass a method with the same signature but a different return type as a method inherited from a superclass. Composition, on the other hand, allows you to change the interface of a front-end class without affecting back-end classes.</li>
<li>Composition allows you to delay the creation of back-end objects until (and unless) they are needed, as well as changing the back-end objects dynamically throughout the lifetime of the front-end object. With inheritance, you get the image of the superclass in your subclass object image as soon as the subclass is created, and it remains part of the subclass object throughout the lifetime of the subclass.</li>
<li>It is easier to add new subclasses (inheritance) than it is to add new front-end classes (composition), because inheritance comes with polymorphism. If you have a bit of code that relies only on a superclass interface, that code can work with a new subclass without change. This is not true of composition, unless you use composition with interfaces. Used together, composition and interfaces make a very powerful design tool. I’ll talk about this approach in next month’s Design Techniques article.</li>
<li>The explicit method-invocation forwarding (or delegation) approach of composition will often have a performance cost as compared to inheritance’s single invocation of an inherited superclass method implementation. I say “often” here because the performance really depends on many factors, including how the JVM optimizes the program as it executes it.</li>
<li>With both composition and inheritance, changing the implementation (not the interface) of any class is easy. The ripple effect of implementation changes remain inside the same class.</li>
</ul>
<h3 id="int__u548CInteger_u7684_u533A_u522B"><a href="#int__u548CInteger_u7684_u533A_u522B" class="headerlink" title="int 和Integer的区别"></a>int 和Integer的区别</h3><p>primitive,mutable,32-bit, faster<br>object that contains an int field, immutable, a wrapper, methods to dealing with an int, like toString()</p>
<h3 id="how_to_implement_hashtable"><a href="#how_to_implement_hashtable" class="headerlink" title="how to implement hashtable"></a>how to implement hashtable</h3><p>underlying an array<br>CC 311<br>linear probing - primary clusterings<br>quadratic probing - size is prime and at least 1/2 empty</p>
<h3 id="sorting_u7B97_u6CD5"><a href="#sorting_u7B97_u6CD5" class="headerlink" title="sorting算法"></a>sorting算法</h3><ul>
<li>Insertion Sort: O(n^2), O(n) best</li>
<li>Selection Sort: O(n^2)</li>
<li>Quick sort: pivot value-partition, nlogn. chose pivot value: median of first, middle, last, values GOOD! </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Sort b[h..k]. **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QS</span><span class="params">(<span class="keyword">int</span>[] b, <span class="keyword">int</span> h, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (b[h..k] has less than <span class="number">2</span> elements) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> j= partition(b, h, k);</span><br><span class="line">	<span class="comment">// We know b[h..j–1] &lt;= b[j] &lt;= b[j+1..k]</span></span><br><span class="line">	<span class="comment">// Sort b[h..j-1] and b[j+1..k] </span></span><br><span class="line">	QS(b, h, j-<span class="number">1</span>); </span><br><span class="line">	QS(b, j+<span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Merge sort: nlogn, O(n) space</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Sort b[h..k] **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span>[] b, <span class="keyword">int</span> h, <span class="keyword">int</span> k])</span> </span>&#123; </span><br><span class="line">	<span class="keyword">if</span> (size b[h..k] is less than <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> t= (h+k)/<span class="number">2</span>; </span><br><span class="line">	mergesort(b, h, t); </span><br><span class="line">	mergesort(b, t+<span class="number">1</span>, k); </span><br><span class="line">	merge(b, h, t, k); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>Domain Name System: translate human-memorable domain name to numerical IP address needed for computer services and devices. Send request to the domain server or a local copy server. Cache</p>
<h3 id="TCP_vs_UDP"><a href="#TCP_vs_UDP" class="headerlink" title="TCP vs UDP"></a>TCP vs UDP</h3><p>Both are used to send bits of data - packets - over the internet, build on top of the internet protocol. Error-correction and robustness vs speed and reduced overhead<br>Transmission Control Protocol. It’s the most commonly used protocol on the Internet. TCP isn’t just one way communication — the remote system sends packets back to acknowledge it’s received your packets. TCP guarantees the recipient will receive the packets in order by numbering them. The recipient sends messages back to the sender saying it received the messages. If the sender doesn’t get a correct response, it will resend the packets to ensure the recipient received them. Packets are also checked for errors. TCP is all about this reliability — packets sent with TCP are tracked so no data is lost or corrupted in transit. </p>
<p>UDP stands for User Datagram Protocol — a datagram is the same thing as a packet of information. The UDP protocol works similarly to TCP, but it throws all the error-checking stuff out. All the back-and-forth communication and deliverability guarantees slow things down. When using UDP, packets are just sent to the recipient. The sender won’t wait to make sure the recipient received the packet — it will just continue sending the next packets. If you’re the recipient and you miss some UDP packets, too bad — you can’t ask for those packets again. There’s no guarantee you’re getting all the packets and there’s no way to ask for a packet again if you miss it, but losing all this overhead means the computers can communicate more quickly.<br>UDP is used when speed is desirable and error correction isn’t necessary. For example, UDP is frequently used for live broadcasts and online games. Ditching TCP’s error correction helps speed up the game connection and reduce latency.</p>
<h3 id="u4EC0_u4E48_u662FOO"><a href="#u4EC0_u4E48_u662FOO" class="headerlink" title="什么是OO"></a>什么是OO</h3><p>model object, it’s state and behavior, instead of logic. Attribute and methods</p>
<h3 id="OO_u548Cprocedural_programming_u7684_u533A_u522B"><a href="#OO_u548Cprocedural_programming_u7684_u533A_u522B" class="headerlink" title="OO和procedural programming的区别"></a>OO和procedural programming的区别</h3><p>extensible, easy to maintain, function based.</p>
<h3 id="OO_u7684_u4F18_u52BF"><a href="#OO_u7684_u4F18_u52BF" class="headerlink" title="OO的优势"></a>OO的优势</h3><h4 id="1-encapsulation"><a href="#1-encapsulation" class="headerlink" title="1.encapsulation"></a>1.encapsulation</h4><p>Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below: </p>
<ul>
<li>The internal state of every objected is protected by hiding its attributes.</li>
<li>It increases usability and maintenance of code, because the behavior of an object can be independently changed or extended.</li>
<li>It improves modularity by preventing objects to interact with each other, in an undesired way. </li>
</ul>
<h4 id="2-inheritance"><a href="#2-inheritance" class="headerlink" title="2.inheritance"></a>2.inheritance</h4><p>Inheritance provides an object with the ability to acquire the fields and methods of another class, called base class. Inheritance provides re-usability of code and can be used to add additional features to an existing class, without modifying it. </p>
<h4 id="3-_polymorphism"><a href="#3-_polymorphism" class="headerlink" title="3. polymorphism"></a>3. polymorphism</h4><p>Polymorphism is the ability of programming languages to present the same interface for differing underlying data types. A polymorphic type is a type whose operations can also be applied to values of some other type. provision of a single interface to entities of different types.</p>
<ul>
<li>Ad hoc: function overloading</li>
<li>Parametric: generic</li>
<li>Subtyping: subclasses extend common a superclass. can use a variable of a superclass type to hold a reference to an object whose class is the superclass or any of its subclasses.</li>
</ul>
<h3 id="How_does_error_handling_works_3F_Do_you_know_what_is_exception_handling"><a href="#How_does_error_handling_works_3F_Do_you_know_what_is_exception_handling" class="headerlink" title="How does error handling works? Do you know what is exception handling"></a>How does error handling works? Do you know what is exception handling</h3><p>Error is handled by exception object. A try-with-resources statement can have catch and finally blocks just like an ordinary try statement. In a try-with-resources statement, any catch or finally block is run after the resources declared have been closed.<br>throw – We know that if any exception occurs, an exception object is getting created and then Java runtime starts processing to handle them. Sometime we might want to generate exception explicitly in our code, for example in a user authentication program we should throw exception to client if the password is null. throw keyword is used to throw exception to the runtime to handle it.</p>
<p>throws – When we are throwing any exception in a method and not handling it, then we need to use throws keyword in method signature to let caller program know the exceptions that might be thrown by the method. The caller method might handle these exceptions or propagate it to it’s caller method using throws keyword. We can provide multiple exceptions in the throws clause and it can be used with main() method also.</p>
<p>try-catch – We use try-catch block for exception handling in our code. try is the start of the block and catch is at the end of try block to handle the exceptions. We can have multiple catch blocks with a try and try-catch block can be nested also. catch block requires a parameter that should be of type Exception.<br>finally – finally block is optional and can be used only with try-catch block. Since exception halts the process of execution, we might have some resources open that will not get closed, so we can use finally block. finally block gets executed always, whether exception occurred or not.</p>
<p>As stated earlier, when any exception is raised an exception object is getting created. Java Exceptions are hierarchical and inheritance is used to categorize different types of exceptions. Throwable is the parent class of Java Exceptions Hierarchy and it has two child objects – Error and Exception. Exceptions are further divided into checked exceptions and runtime exception.</p>
<ul>
<li>Errors: Errors are exceptional scenarios that are out of scope of application and it’s not possible to anticipate and recover from them, for example hardware failure, JVM crash or out of memory error. That’s why we have a separate hierarchy of errors and we should not try to handle these situations. Some of the common Errors are OutOfMemoryError and StackOverflowError.</li>
<li>Checked Exceptions: Checked Exceptions are exceptional scenarios that we can anticipate in a program and try to recover from it, for example FileNotFoundException. We should catch this exception and provide useful message to user and log it properly for debugging purpose. Exception is the parent class of all Checked Exceptions and if we are throwing a checked exception, we must catch it in the same method or we have to propagate it to the caller using throws keyword.</li>
<li>Runtime Exception: Runtime Exceptions are cause by bad programming, for example trying to retrieve an element from the Array. We should check the length of array first before trying to retrieve the element otherwise it might throw ArrayIndexOutOfBoundException at runtime. RuntimeException is the parent class of all runtime exceptions. If we are throwing any runtime exception in a method, it’s not required to specify them in the method signature throws clause. Runtime exceptions can be avoided with better programming.</li>
</ul>
<h3 id="How_do_you_implement_multiple_inheritance_in_Java_3F"><a href="#How_do_you_implement_multiple_inheritance_in_Java_3F" class="headerlink" title="How do you implement multiple inheritance in Java?"></a>How do you implement multiple inheritance in Java?</h3><p>Java does not support multiple inheritance. Each class is able to extend only on one class, but is able to implement more than one interfaces. </p>
<h3 id="What_is_an_inner_class_3F"><a href="#What_is_an_inner_class_3F" class="headerlink" title="What is an inner class?"></a>What is an inner class?</h3><p>As with instance methods and variables, an inner class is associated with an instance of its enclosing class and has direct access to that object’s methods and fields. Also, because an inner class is associated with an instance, it cannot define any static members itself.</p>
<ul>
<li>It is a way of logically grouping classes that are only used in one place: If a class is useful to only one other class, then it is logical to embed it in that class and keep the two together. Nesting such “helper classes” makes their package more streamlined.</li>
<li>It increases encapsulation: Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private. By hiding class B within class A, A’s members can be declared private and B can access them. In addition, B itself can be hidden from the outside world.</li>
<li>It can lead to more readable and maintainable code: Nesting small classes within top-level classes places the code closer to where it is used.</li>
</ul>
<h3 id="python__u548Cjava_u7684_u533A_u522B_uFF0Ctype_checking_u662F_u5426_u91CD_u8981"><a href="#python__u548Cjava_u7684_u533A_u522B_uFF0Ctype_checking_u662F_u5426_u91CD_u8981" class="headerlink" title="python 和java的区别，type checking是否重要"></a>python 和java的区别，type checking是否重要</h3><p>Python: dynamically typed/weak typing. But you will not be able to catch many errors until you run the program.</p>
<p>Type checking is useful because you can eliminate certain classes of errors before you run the program. </p>
<p>For example, say you have a (dumb) function add1, that takes an int and returns an int that is one larger. Java style typechecking will guarantee that this function is only operating on ints. So before you run the program, you will catch any case where you call add1 on the wrong type, e.g. add1(“5”) will cause a compiler error.</p>
<p>Types can also help the compiler optimize your code, by using machine instructions specific to the data type you are operating on.</p>
<h3 id="JVM_how_it_works"><a href="#JVM_how_it_works" class="headerlink" title="JVM how it works"></a>JVM how it works</h3><p>A Java virtual machine (JVM) is a process virtual machine that can execute Java bytecode. Each Java source file is compiled into a bytecode file, which is executed by the JVM. Java was designed to allow application programs to be built that could be run on any platform, without having to be rewritten or recompiled by the programmer for each separate platform. A Java virtual machine makes this possible, because it is aware of the specific instruction lengths and other particularities of the underlying hardware platform. </p>
<h3 id="garbage_collection"><a href="#garbage_collection" class="headerlink" title="garbage collection"></a>garbage collection</h3><p>Question 1 - What is structure of Java Heap ? What is Perm Gen space in Heap ?<br>Answer : In order to better perform in Garbage collection questions in any Java interview, It’s important to have basic understanding of  Java Heap space. To learn more about heap, see my post 10 points on Java heap space. By the way Heap is divided into different generation e.g. new generation, old generation and PermGen space.PermGen space is used to store class’s metadata and filling of PermGen space can cause java.lang.OutOfMemory:PermGen space. Its also worth noting to remember JVM option to configure PermGen space in Java.</p>
<p>Question 2 - How do you identify minor and major garbage collection in Java?<br>Answer: Minor collection prints “GC” if garbage collection logging is enable using –verbose:gc or -XX:PrintGCDetails, while Major collection prints “Full GC”. </p>
<p>Question 3 - What is difference between ParNew and DefNew Young Generation Garbage collector?<br> ParNew and DefNew is two young generation garbage collector. ParNew is a multi-threaded GC used along with concurrent Mark Sweep while DefNew is single threaded GC used along with Serial Garbage Collector.</p>
<p>Question 4 - How do you find GC resulted due to calling System.gc()?<br>Similar to major and minor collection, there will be a word “System” included in Garbage collection output.</p>
<p>Question 5 - What is difference between Serial and Throughput Garbage collector?<br>Answer : Serial Garbage collector is a stop the world GC which stops application thread from running during both minor and major collection. Serial Garbage collector can be enabled using JVM option -XX:UseSerialGC and it’s designed for Java application which doesn’t have pause time requirement and have client configuration. Serial Garbage collector was also default GC in JDK 1.4 before ergonomics was introduced in JDK 1.5. Serial GC is most suited for small application with less number of thread while throughput GG is more suited for large applications. On the other hand Throughput garbage collector is parallel collector where minor and major collection happens in parallel taking full advantage of all the system resources available like multiple processor. Though both major and minor collection runs on stop-the-world fashion and introduced pause in application. Throughput Garbage collector can be enable using -XX:UseParallelGC or -XX:UseOldParallelGC. It increases overall throughput of application my minimizing time spent in Garbage collection but still has long pauses during full GC.</p>
<p>Question 6 – When does an Object becomes eligible for Garbage collection in Java ?<br>Answer : An object becomes eligible for garbage collection when there is no live reference for that object or it can not be reached by any live thread. Cyclic reference doesn’t count as live reference and if two objects are pointing to each other and there is no live reference for any of them, than both are eligible for GC. Also Garbage collection thread is a daemon thread which will run by JVM based upon GC algorithm and when runs it collects all objects which are eligible for GC.</p>
<p>Question 7 - What is finalize method in Java ? When does Garbage collector calls finalize method in Java ?<br>Answer : Finalize method in Java also called finalizer is a method defined in java.lang.Object and called by Garbage collector before collecting any object which is eligible for GC. Finalize() method provides last chance to object to do cleanup and free any remaining resource, to learn more about finalizers, read What is finalize method in Java.</p>
<p>Question 8 - If Object A has reference to Object B and Object B refer to Object A, apart from that there is no live reference to either object A or B, Does they are eligible to Garbage collection ?<br> An object becomes eligible for Garbage collection if there is no live reference for it. It can not be accessible from any Thread and cyclic dependency doesn’t prevent Object from being Garbage collected. Which means in this case both Object A and Object B are eligible of Garbage collection. See How Garbage collection works in Java for more details.</p>
<p>Question 9 -Can we force Garbage collector to run at any time ?<br>Answer : No, you can not force Garbage collection in Java. Though you can request it by calling Sytem.gc() or its cousin Runtime.getRuntime().gc(). It’s not guaranteed that GC will run immediately as result of calling these method.</p>
<p>Question 10 - Does Garbage collection occur in permanent generation space in JVM?<br> Garbage Collection does occur in PermGen space and if PermGen space is full or cross a threshold, it can trigger Full GC. If you look at output of GC you will find that PermGen space is also garbage collected. This is why correct sizing of PermGen space is important to avoid frequent full GC. You can control size of PermGen space by JVM options -XX:PermGenSize and -XX:MaxPermGenSize.</p>
<p>Question 11 : How to you monitor garbage collection activities?<br>. You can monitor garbage collection activities either offline or real-time. You can use tools like JConsole and VisualVM VM with its Visual GC plug-in to monitor real time garbage collection activities and memory status of JVM or you can redirect Garbage collection output to a log file for offline analysis by using -XlogGC=&lt;PATH&gt; JVM parameter. Anyway you should always enable GC options like -XX:PrintGCDetails -X:verboseGC and -XX:PrintGCTimeStamps as it doesn’t impact application performance much but provide useful states for performance monitoring.</p>
<p>Question 12: Look at below Garbage collection output and answer following question :<br>[GC<br>       [ParNew: 1512K-&gt;64K(1512K), 0.0635032 secs]<br>       15604K-&gt;13569K(600345K), 0.0636056 secs]<br>       [Times: user=0.03 sys=0.00, real=0.06 secs]</p>
<ol>
<li>Is this output of Major Collection or Minor Collection ?</li>
<li>Which young Generation Garbage collector is used ?</li>
<li>What is size of Young Generation, Old Generation and total Heap Size?</li>
<li>How much memory is freed from Garbage collection ?</li>
<li>How much time is taken for Garbage collection ?</li>
<li>What is current Occupancy of Young Generation ?</li>
</ol>
<p>Answer 1:  It’s Minor collection because of “GC” word, In case of Major collection, you would see “Full GC”.</p>
<p>Answer 2: This output is of multi-threaded Young Generation Garbage collector “ParNew”, which is used along with CMS concurrent Garbage collector.</p>
<p>Answer 3: [1512K] which is written in bracket is total size of Young Generation, which include Eden and two survivor space. 1512K on left of arrow is occupancy of Yong Generation before GC and 64K is occupancy after GC. On the next line value if bracket is total heap size which is (600345K). If we subtract size of young generation to total heap size we can calculate size of Old Generation. This line also shows occupancy of heap before and after Garbage collection.</p>
<p>Answer 4: As answered in previous garbage collection interview question, second line shows heap occupancy before and after Garbage collection. If we subtract value of right side 13569K, to value on left side 15604K, we can get total memory freed by GC.</p>
<p>Answer 5: 0.0636056 secs on second line denotes total time it took to collect dead objects during Garbage collection. It also include time taken to GC young generation which is shown in first line (0635032 secs).</p>
<p>Answer 6: 64K<br>L</p>
<h3 id="Java_u5982_u4F55_u4EA7_u751Fmemory_leak"><a href="#Java_u5982_u4F55_u4EA7_u751Fmemory_leak" class="headerlink" title="Java如何产生memory leak"></a>Java如何产生memory leak</h3><p>Static field holding object reference [esp final field]</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">MemorableClass</span> &#123;</span><br><span class="line">    static final <span class="type">ArrayList</span> list = new <span class="type">ArrayList</span><span class="container">(100)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="container">(<span class="type">Unclosed</span>)</span> open streams <span class="container">( <span class="title">file</span> , <span class="title">network</span> <span class="title">etc</span>... )</span></span><br><span class="line">try &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> br = new <span class="type">BufferedReader</span><span class="container">(<span class="title">new</span> <span class="type">FileReader(inputFile)</span>)</span>;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125; catch <span class="container">(<span class="type">Exception</span> <span class="title">e</span>)</span> &#123;</span><br><span class="line">    e.printStacktrace<span class="container">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Unclosed</span> connections</span><br><span class="line">try &#123;</span><br><span class="line">    <span class="type">Connection</span> conn = <span class="type">ConnectionFactory</span>.getConnection<span class="container">()</span>;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125; catch <span class="container">(<span class="type">Exception</span> <span class="title">e</span>)</span> &#123;</span><br><span class="line">    e.printStacktrace<span class="container">()</span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Areas that are unreachable from JVM’s garbage collector, such as memory allocated through native methods<br>In web applications, some objects are stored in application scope until the application is explicitly stopped or removed.<br>getServletContext().setAttribute(“SOME_MAP”, map);<br>Incorrect or inappropriate JVM options, such as the noclassgc option on IBM JDK that prevents unused class garbage collection</p>
<h3 id="difference_between_linux_and_windows"><a href="#difference_between_linux_and_windows" class="headerlink" title="difference between linux and windows"></a>difference between linux and windows</h3><p>File structure, registry, package manager, command terminal</p>
<h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p>Concurrency refers to a single program in which several threads are running simultaneously<br>Implements runnable or extends Thread. Class Thread has methods to allow more control over threads. You can interrupt a thread, maintain a group of threads, set/change its priority, sleep it for a while, etc. </p>
<h3 id="How_does_multithreading_works_3F_Advantages_and_Disadvantages_3F_What_is_the_race_condition_3F"><a href="#How_does_multithreading_works_3F_Advantages_and_Disadvantages_3F_What_is_the_race_condition_3F" class="headerlink" title="How does multithreading works? Advantages and Disadvantages? What is the race condition?"></a>How does multithreading works? Advantages and Disadvantages? What is the race condition?</h3><p>A race condition arises if two or more threads access the same variables or objects concurrently and at least one does updates<br>Synchronization barrier</p>
<p>Only one thread can “hold” a lock at a time. If several request the same lock, Java somehow decides which will get it. The lock is released when the thread leaves the synchronization block<br>synchronized(someObject) { protected code }<br>The protected code has a mutual exclusion guarantee: At most one thread can be in it. When released, some other thread can acquire the lock </p>
<p>High priority thread runs before the low priority, and the latter starves. Finer grained synchronization: can only be used inside a synchronization block. wait/notify </p>
<h3 id="Starvation"><a href="#Starvation" class="headerlink" title="Starvation"></a>Starvation</h3><p>Starvation describes a situation where a thread is unable to gain regular access to shared resources and is unable to make progress. This happens when shared resources are made unavailable for long periods by “greedy” threads. For example, suppose an object provides a synchronized method that often takes a long time to return. If one thread invokes this method frequently, other threads that also need frequent synchronized access to the same object will often be blocked.</p>
<h3 id="deadlock"><a href="#deadlock" class="headerlink" title="deadlock"></a>deadlock</h3><p>A deadlock occurs when two or more competing threads are waiting for one-another… forever<br>Acquire a lock, use it, then promptly release it, or … acquire locks in some “fixed” order </p>
<h3 id="Livelock"><a href="#Livelock" class="headerlink" title="Livelock"></a>Livelock</h3><p>A thread often acts in response to the action of another thread. If the other thread’s action is also a response to the action of another thread, then livelock may result. As with deadlock, livelocked threads are unable to make further progress. However, the threads are not blocked — they are simply too busy responding to each other to resume work. This is comparable to two people attempting to pass each other in a corridor: Alphonse moves to his left to let Gaston pass, while Gaston moves to his right to let Alphonse pass. Seeing that they are still blocking each other, Alphone moves to his right, while Gaston moves to his left. They’re still blocking each other, so…</p>
<h3 id="remove_duplicate_tuples_from_database"><a href="#remove_duplicate_tuples_from_database" class="headerlink" title="remove duplicate tuples from database"></a>remove duplicate tuples from database</h3><ul>
<li>The simplest way to eliminate the duplicate records is to SELECT DISTINCT into a temporary table, truncate the original table and SELECT the records back into the original table. If this is a large table, it can quickly fill up your tempdb. This also isn’t very fast. It makes a copy of your data and then makes another copy of your data. Also while this script is running, your data is unavailable. It may not be the best solution but it certainly works. </li>
<li>The second option is to rename the original table to something else, and copy the unique records into the original table.  This has a couple of benefits over the first option. It doesn’t use tempdb and it only makes one copy of the data. On the downside, you’ll need to rebuild any indexes or constraints on the table when you’re done. This one also makes the data unavailable during the process </li>
<li>Our last option is more complex. It has the benefit of not making a copy of the data and only deleting the records that are duplicates. It’s main drawback is that we have to alter the original table and add a sequential record number field to uniquely identify each record. It’s actually possible to combine the SELECT INTO #dupes and the DELETE into one DELETE statement. </li>
</ul>
<h3 id="how_to_make_sure_that_a_database_is_secure_for_a_customer"><a href="#how_to_make_sure_that_a_database_is_secure_for_a_customer" class="headerlink" title="how to make sure that a database is secure for a customer"></a>how to make sure that a database is secure for a customer</h3><p>Separate the Database and Web Servers<br>Encrypt Stored Files<br>Encrypt Your Backups Too<br>Use a WAF Employ web application firewalls.<br>Minimize Use of 3rd Party Apps<br>Don’t Use a Shared Server<br>Enable Security Controls</p>
<h3 id="index_u6709_u4EC0_u4E48_u7528"><a href="#index_u6709_u4EC0_u4E48_u7528" class="headerlink" title="index有什么用"></a>index有什么用</h3><p>An index on a file speeds up selections on the search key fields for the index </p>
<h3 id="B+_tree_u7684index"><a href="#B+_tree_u7684index" class="headerlink" title="B+ tree的index"></a>B+ tree的index</h3><p>Supports equality and range-searches efficiently. Hash-based indexes are best for equality selections. Cannot support range searches. </p>
<h3 id="u6570_u636E_u5E93normalize_u7684_u5B9A_u4E49_uFF0C_u597D_u5904"><a href="#u6570_u636E_u5E93normalize_u7684_u5B9A_u4E49_uFF0C_u597D_u5904" class="headerlink" title="数据库normalize的定义，好处"></a>数据库normalize的定义，好处</h3><p>Database normalization (or normalisation) is the process of organizing the columns (attributes) and tables (relations) of a relational database to minimize data redundancy. Normalization involves decomposing a table into less redundant (and smaller) tables without losing information; defining foreign keys in the old table referencing the primary keys of the new ones. The objective is to isolate data so that additions, deletions, and modifications of an attribute can be made in just one table and then propagated through the rest of the database using the defined foreign keys.<br>Use foreign key, Information is only stored once, Reduce redundancy, but require expensive join<br>Denormalization is commonly used to create highly scalable systems.</p>
<p>Design:</p>
<h3 id="What_is_singleton"><a href="#What_is_singleton" class="headerlink" title="What is singleton"></a>What is singleton</h3><p>The Singleton pattern ensures that a class has only one instance and ensures access to the instance through the application. It can be useful in cases where you have a “global” object with exactly one instance. For example, we may want to implement Restaurant such that it hasexactly one instance of Restaurant. </p>
<h3 id="Factory_method"><a href="#Factory_method" class="headerlink" title="Factory method"></a>Factory method</h3><p>The Factory Method offers an interface for creating an instance of a class, with its subclasses deciding which class to instantiate. You might want to implement this with the creator class being abstract and not providing an implementation for the Factory method. Or,you could have the Creator class be aconcrete class that providesan imple- mentation for the Factory method. In this case, the Factory method would take a param- eter representing which class to instantiate. </p>
<h3 id="Builder_pattern"><a href="#Builder_pattern" class="headerlink" title="Builder pattern"></a>Builder pattern</h3><p>The builder pattern is an object creation software design pattern. Unlike the abstract factory pattern and the factory method pattern whose intention is to enable polymorphism, the intention of the builder pattern is to find a solution to the telescoping constructor anti-pattern[citation needed]. The telescoping constructor anti-pattern occurs when the increase of object constructor parameter combination leads to an exponential list of constructors. Instead of using numerous constructors, the builder pattern uses another object, a builder, that receives each initialization parameter step by step and then returns the resulting constructed object at once.<br>The builder pattern has another benefit. It can be used for objects that contain flat data (html code, SQL query, X.509 certificate…), that is to say, data that can’t be easily edited. This type of data cannot be edited step by step and must be edited at once. The best way to construct such an object is to use a builder class.[citation needed]</p>
<p>Builder often builds a Composite. Often, designs start out using Factory Method (less complicated, more customizable, subclasses proliferate) and evolve toward Abstract Factory, Prototype, or Builder (more flexible, more complex) as the designer discovers where more flexibility is needed. Sometimes creational patterns are complementary: Builder can use one of the other patterns to implement which components are built. Builders are good candidates for a fluent interface.</p>
<h3 id="u5982_u679Cclient_u548Cserver_u76F8_u8FDE_u4E4B_u540Eclient_u6267_u884C_u64CD_u4F5C_u975E_u5E38_u6162_uFF0C_u53EF_u80FD_u662F_u4EC0_u4E48_u95EE_u9898_uFF0C_u5982_u4F55_u4F18_u5316"><a href="#u5982_u679Cclient_u548Cserver_u76F8_u8FDE_u4E4B_u540Eclient_u6267_u884C_u64CD_u4F5C_u975E_u5E38_u6162_uFF0C_u53EF_u80FD_u662F_u4EC0_u4E48_u95EE_u9898_uFF0C_u5982_u4F55_u4F18_u5316" class="headerlink" title="如果client和server相连之后client执行操作非常慢，可能是什么问题，如何优化"></a>如果client和server相连之后client执行操作非常慢，可能是什么问题，如何优化</h3><pre><code>Could be any of these A. Hardware/OS-related causes B. 3rd party application interference C. Database Design D. Database corruption
</code></pre><h3 id="waterfall_u7684_u7F3A_u70B9"><a href="#waterfall_u7684_u7F3A_u70B9" class="headerlink" title="waterfall的缺点"></a>waterfall的缺点</h3><p>In a waterfall model, each phase must be completed fully before the next phase can begin. This type of model is basically used for the for the project which is small and there are no uncertain requirements. At the end of each phase, a review takes place to determine if the project is on the right path and whether or not to continue or discard the project. In this model the testing starts only after the development is complete. In waterfall model phases do not overlap.</p>
<p>Advantages of waterfall model:</p>
<ul>
<li>This model is simple and easy to understand and use.</li>
<li>It is easy to manage due to the rigidity of the model – each phase has specific deliverables and a review process.</li>
<li>In this model phases are processed and completed one at a time. Phases do not overlap.</li>
<li>Waterfall model works well for smaller projects where requirements are very well understood.<br>Disadvantages of waterfall model:</li>
<li>Once an application is in the testing stage, it is very difficult to go back and change something that was not well-thought out in the concept stage.</li>
<li>No working software is produced until late during the life cycle.</li>
<li>High amounts of risk and uncertainty.</li>
<li>Not a good model for complex and object-oriented projects.</li>
<li>Poor model for long and ongoing projects.</li>
<li>Not suitable for the projects where requirements are at a moderate to high risk of changing.</li>
</ul>
<h3 id="MVC_pattern_3A_When_you_receive_a_request_in_an_MVC_app_2C_what_happens_3F"><a href="#MVC_pattern_3A_When_you_receive_a_request_in_an_MVC_app_2C_what_happens_3F" class="headerlink" title="MVC pattern: When you receive a request in an MVC app, what happens?"></a>MVC pattern: When you receive a request in an MVC app, what happens?</h3><p>As with other software patterns, MVC expresses the “core of the solution” to a problem while allowing it to be adapted for each system.[9] Particular MVC architectures can vary significantly from the traditional description here.[10]</p>
<p>Components[edit]<br>The central component of MVC, the model, captures the behavior of the application in terms of its problem domain, independent of the user interface.[11] The model directly manages the data, logic and rules of the application. A view can be any output representation of information, such as a chart or a diagram; multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants. The third part, the controller, accepts input and converts it to commands for the model or view.[12]<br>Interactions[edit]<br>In addition to dividing the application into three kinds of components, the model–view–controller design defines the interactions between them.[13]</p>
<ul>
<li>A controller can send commands to the model to update the model’s state (e.g., editing a document). It can also send commands to its associated view to change the view’s presentation of the model (e.g., by scrolling through a document).</li>
<li>A model stores data that is retrieved according to commands from the controller and displayed in the view.</li>
<li>A view generates an output presentation to the user based on changes in the model.</li>
<li>A view controller generates an output view and an embedded controller</li>
</ul>
<h3 id="Checked_vs_Unchecked_Exceptions_in_Java"><a href="#Checked_vs_Unchecked_Exceptions_in_Java" class="headerlink" title="Checked vs Unchecked Exceptions in Java"></a>Checked vs Unchecked Exceptions in Java</h3><p>1) Checked: are the exceptions that are checked at compile time. If some code within a method throws a checked exception, then the method must either handle the exception or it must specify the exception using throws keyword.</p>
<p>2) Unchecked are the exceptions that are not checked at compiled time. In C++, all exceptions are unchecked, so it is not forced by the compiler to either handle or specify the exception. It is up to the programmers to be civilized, and specify or catch the exceptions.</p>
<p>In Java exceptions under Error and RuntimeException classes are unchecked exceptions, everything else under throwable is checked.</p>
<p>1、throws出现在方法函数头；而throw出现在函数体。<br>2、throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。<br>3、两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</p>
<pre><code>void doA(int a) throws IOException,{
           try{
                 ......

           }catch(Exception1 e){
              throw e;
           }catch(Exception2 e){
              System.out.println(&quot;出错了！&quot;);
           }
           if(a!=b)
              throw new  Exception3(&quot;自定义异常&quot;);
}
</code></pre><p>reflection:<br><a href="http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful" target="_blank" rel="external">http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful</a></p>
<p>singleton<br><a href="http://www.javaworld.com/article/2073352/core-java/simply-singleton.html" target="_blank" rel="external">http://www.javaworld.com/article/2073352/core-java/simply-singleton.html</a><br>Ensure a class has only one instance, and provide a global point of access to it.</p>
<p>it’s appropriate to have exactly one instance of a class: window managers, print spoolers, and filesystems are prototypical examples.<br>are accessed by disparate objects throughout a software system, and therefore require a global point of access</p>
<pre><code>public class ClassicSingleton {
   private static ClassicSingleton instance = null;
   protected ClassicSingleton() {
      // Exists only to defeat instantiation.
   }
   public static ClassicSingleton getInstance() {
      if(instance == null) {
         instance = new ClassicSingleton();
      }
      return instance;
   }
}

Best, Thread safe
public class Singleton {
   public final static Singleton INSTANCE = new Singleton();
   private Singleton() {
         // Exists only to defeat instantiation.
      }
}

Thread safe, but may fail at compile level
public static Singleton getInstance() {
  if(singleton == null) {
     synchronized(Singleton.class) {
       if(singleton == null) {
         singleton = new Singleton();
       }
    }
  }
  return singleton;
}
</code></pre><p>synchronized getInstance method? only need to synchronized when the first time it is called, synchronized function is expensive. </p>
<h3 id="abstract_vs_interface"><a href="#abstract_vs_interface" class="headerlink" title="abstract vs interface"></a>abstract vs interface</h3><p>general rule is if you are creating something that provides common functionality to unrelated classes, use an interface.<br>If you are creating something for objects that are closely related in a hierarchy, use an<br>abstract class. </p>
<p>Abstract classes allow you to provide default functionality for the subclasses.<br>If you plan on updating this base class throughout the life of your program, it is best to allow that base class to be an abstract class. Because you can make a change to it and all of the inheriting classes will now have this new functionality. </p>
<p>If the base class will be changing often and an interface was used instead of an abstract class, we are going to run into problems. Once an interface is changed, any class that implements that will be broken. Now if its just you working on the project, that’s no big deal. However, once your interface is published to the client, that interface needs to be locked down. At that point, you will be breaking the clients code.</p>
<h3 id="java_garbage_collection_2C_how_it_works"><a href="#java_garbage_collection_2C_how_it_works" class="headerlink" title="java garbage collection, how it works"></a>java garbage collection, how it works</h3><p>Java garbage collection is a function of JVM. It can recycle unreferenced spaces dynamically automatically .<br>You can use System.gc(), Runtime.getRuntion().gc() to call garage collection.</p>
<p>It allows developers to create new objects without worrying explicitly about memory allocation and deallocation, because the garbage collector automatically reclaims memory for reuse.</p>
<p>Live objects are tracked and everything else designated garbage.</p>
<p>All objects are allocated on the heap area managed by the JVM. Every item that the developer uses is treated this way, including class objects, static variables, and even the code itself. </p>
<p>As long as an object is being referenced, the JVM considers it alive. Once an object is no longer referenced and therefore is not reachable by the application code, the garbage collector removes it and reclaims the unused memory.</p>
<p>Therefore, a simple Java application has the following GC roots:<br>Local variables in the main method<br>The main thread<br>Static variables of the main class</p>
<p>As long as the application can reach those roots, the whole tree is reachable.</p>
<p>Marking and Sweeping Away Garbage<br>To determine which objects are no longer in use, the JVM intermittently runs what is very aptly called a mark-and-sweep algorithm.<br>two-step process:<br>1.The algorithm traverses all object references, starting with the GC roots, and marks every object found as alive.<br>2.All of the heap memory that is not occupied by marked objects is reclaimed. It is simply marked as free, essentially swept free of unused objects.</p>
<p>Java的垃圾回收机制是Java虚拟机提供的能力，用于在空闲时间以不定时的方式动态回收无任何引用的对象占据的内存空间。<br>需要注意的是：垃圾回收回收的是无任何引用的对象占据的内存空间而不是对象本身。<br>System.gc()<br>Runtime.getRuntime().gc()<br>上面的方法调用时用于显式通知JVM可以进行一次垃圾回收，但真正垃圾回收机制具体在什么时间点开始发生动作这同样是不可预料的，这和抢占式的线程在发生作用时的原理一样</p>
<p>Object creation is faster because global synchronization with the operating system is not needed for every single object. An allocation simply claims some portion of a memory array and moves the offset pointer forward (see Figure 2.1). The next allocation starts at this offset and claims the next portion of the array. When an object is no longer used, the garbage collector reclaims the underlying memory and reuses it for future object allocation. This means there is no explicit deletion and no memory is given back to the operating system.</p>
<p>It’s possible to have unused objects that are still reachable by an application because the developer simply forgot to dereference them. Such objects cannot be garbage-collected. </p>
<h3 id="consumer__26amp_3B_producer"><a href="#consumer__26amp_3B_producer" class="headerlink" title="consumer &amp; producer"></a>consumer &amp; producer</h3><p>// cubbyhole multi-thead<br>// wait(), give up lock<br>// available, because contents can’t be null, if contents can be null, then use content == null<br>// notifyAll(), notify all wait() to continue(include all producers and all consumers) and get lock</p>
<pre><code>class CubbyHole {
   private int contents;
   private boolean available = false;
   public synchronized int get() {
      while (available == false) {
         try {
            wait();
         }
         catch (InterruptedException e) {
         }
      }
      available = false;
      notifyAll();
      return contents;
   }
   public synchronized void put(int value) {
      while (available == true) {
         try {
            wait();
         }
         catch (InterruptedException e) { 
         } 
      }
      contents = value;
      available = true;
      notifyAll();
   }
}
</code></pre><p><a href="http://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem" target="_blank" rel="external">http://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem</a><br><a href="http://en.wikipedia.org/wiki/Semaphore_(programming" target="_blank" rel="external">http://en.wikipedia.org/wiki/Semaphore_(programming</a>)</p>
<p>semaphore is atomic<br>mutex is binary semaphore, 1 or 0.</p>
<p>The emptyCount is initially N, fullCount is initially 0, and useQueue is initially 1.</p>
<p>produce:<br>    P(emptyCount)<br>    P(useQueue)<br>    putItemIntoQueue(item)<br>    V(useQueue)<br>    V(fullCount)</p>
<p>consume:<br>    P(fullCount)<br>    P(useQueue)<br>    item ← getItemFromQueue()<br>    V(useQueue)<br>    V(emptyCount)<br>Example</p>
<ol>
<li>A single consumer enters its critical section. Since fullCount is 0, the consumer blocks.</li>
<li>Several producers enter the producer critical section. No more than N producers may enter their critical section due to emptyCount constraining their entry.</li>
<li>The producers, one at a time, gain access to the queue through useQueue and deposit items in the queue.</li>
<li>Once the first producer exits its critical section, fullCount is incremented, allowing one consumer to enter its critical section.</li>
</ol>
<p>why use useQueue?<br>1.Two producers decrement emptyCount<br>2.One of the producers determines the next empty slot in the buffer<br>3.Second producer determines the next empty slot and gets the same result as the first producer<br>4.Both producers write into the same slot</p>
<h3 id="use_a_class_to_present_a_enum"><a href="#use_a_class_to_present_a_enum" class="headerlink" title="use a class to present a enum"></a>use a class to present a enum</h3><pre><code>public class DayHalf {

     static final DayHalf AM = new DayHalf();
     static final DayHalf PM = new DayHalf();

     private DayHalf() {

     }
}

DayHalf dh1 = DayHalf.AM;
DayHalf dh2 = DayHalf.PM;

public enum Day {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY 
}

public class EnumTest {
    Day day;

    public EnumTest(Day day) {
        this.day = day;
    }

    public void tellItLikeItIs() {
        switch (day) {
            case MONDAY:
                System.out.println(&quot;Mondays are bad.&quot;);
                break;

            case FRIDAY:
                System.out.println(&quot;Fridays are better.&quot;);
                break;

            case SATURDAY: case SUNDAY:
                System.out.println(&quot;Weekends are best.&quot;);
                break;

            default:
                System.out.println(&quot;Midweek days are so-so.&quot;);
                break;
        }
    }

    public static void main(String[] args) {
        EnumTest firstDay = new EnumTest(Day.MONDAY);
        firstDay.tellItLikeItIs();
        EnumTest thirdDay = new EnumTest(Day.WEDNESDAY);
        thirdDay.tellItLikeItIs();
        EnumTest fifthDay = new EnumTest(Day.FRIDAY);
        fifthDay.tellItLikeItIs();
        EnumTest sixthDay = new EnumTest(Day.SATURDAY);
        sixthDay.tellItLikeItIs();
        EnumTest seventhDay = new EnumTest(Day.SUNDAY);
        seventhDay.tellItLikeItIs();
    }
}
</code></pre><h3 id="What_is_difference_between_fail-fast_and_fail-safe_Iterators_3F"><a href="#What_is_difference_between_fail-fast_and_fail-safe_Iterators_3F" class="headerlink" title="What is difference between fail-fast and fail-safe Iterators?"></a>What is difference between fail-fast and fail-safe Iterators?</h3><p>Fail-fast Iterators throws ConcurrentModificationException when one Thread is iterating over collection object and other thread structurally modify Collection either by adding, removing or modifying objects on underlying collection. They are called fail-fast because they try to immediately throw Exception when they encounter failure. </p>
<p>fail-safe Iterators works on copy of collection instead of original collection</p>
<h3 id="What_is_difference_between_poll_28_29_and_remove_28_29_method_of_Queue_interface_3F"><a href="#What_is_difference_between_poll_28_29_and_remove_28_29_method_of_Queue_interface_3F" class="headerlink" title="What is difference between poll() and remove() method of Queue interface?"></a>What is difference between poll() and remove() method of Queue interface?</h3><p>Though both poll() and remove() method from Queue is used to remove object and returns head of the queue, there is subtle difference between them. If Queue is empty() then a call to remove() method will throw Exception, while a call to poll() method returns null. </p>
<p>How do you remove an entry from a Collection? what is difference between remove() method of Collection and remove() method of Iterator, which one you will use, while removing elements during iteration?</p>
<p>You can use any of these method to remove an entry from Collection, while not iterating.</p>
<p>If you use Collection’s or List’s remove() method during iteration then your code will throw ConcurrentModificationException. That’s why it’s advised to use Iterator remove() method to remove objects from Collection.</p>
<h3 id="What_is_difference_between_Synchronized_Collection_and_Concurrent_Collection_3F"><a href="#What_is_difference_between_Synchronized_Collection_and_Concurrent_Collection_3F" class="headerlink" title="What is difference between Synchronized Collection and Concurrent Collection?"></a>What is difference between Synchronized Collection and Concurrent Collection?</h3><p>Concurrent Collections has better performance than synchronized Collection because they lock only a portion of Map to achieve concurrency and Synchronization.</p>
<h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>BlockingQueue<br>use BlockingQueue to solve Producer Consumer problem<br>a Queue that supports operations that wait for the queue to become non-empty when retrieving and removing an element, and wait for space to become available in the queue when adding an element.</p>
<p>CopyOnWriteArrayList<br>provides better concurrent access than Synchronized List. CopyOnWriteArrayList doesn’t throw any ConcurrentModification Exception.<br>Its different than ArrayList because its thread-safe and ArrayList is not thread safe and its different than Vector in terms of Concurrency. </p>
<p>arraylist vector<br>non-synchronized, synchronized<br>iterator, enumeration<br>resize: grow by half of current size, double current size</p>
<p>How does HashSet is implemented in Java, How does it uses Hashing ?<br>you will find that that it uses a HashMap with same values for all keys</p>
<ol>
<li>What do you need to do to use a custom object as key in Collection classes like Map or Set?<br>If you are using any custom object in Map as key, you need to override equals() and hashCode() method<br>On the other hand if you are storing a custom object in Sorted Collection e.g. SortedSet or SortedMap, you also need to make sure that your equals() method is consistent to compareTo() method</li>
</ol>
<ol>
<li>When do you use ConcurrentHashMap in Java?</li>
</ol>
<p>ConcurrentHashMap is better suited for situation where you have multiple readers and one<br>Writer or fewer writers since Map gets locked only during write operation.<br>If you have equal number of reader and writer than ConcurrentHashMap will perform in line of Hashtable or synchronized HashMap.</p>
<p>17) Can we replace Hashtable with ConcurrentHashMap?</p>
<p>Answer 3 : Yes we can replace Hashtable with ConcurrentHashMap and that’s what suggested in Java documentation of ConcurrentHashMap. but you need to be careful with code which relies on locking behavior of Hashtable. Since Hashtable locks whole Map instead of portion of Map.</p>
<p>ListIterator has add() method but Iterator doesn’t or Why add() method is declared in ListIterator and not on Iterator.<br>ListIterator has add() method because of its ability to traverse or iterate in both direction of collection. it maintains two pointers in terms of previous and next call and in position to add new element without affecting current iteration.</p>
<p>Override允许子类改变父类的一些行为。<br>2.方法被定义为private或static或final的则不能被覆盖。<br>4.在方法调用时先会在子类中找覆盖的方法，如果子类中没有则会在父类中去找。 </p>
<p>2) Explain Collection’s hierarchy?<br>Java Collections Framework:<br>Collection: [set:[SortedSet], list, queue]<br>Map:[SortedMap]</p>
<p>Framework also consist of Map interface, which is part of collection framework. but it does not extend Collection interface.</p>
<p>4) Why Map interface does not extend Collection interface?</p>
<p>A good answer to this interview question is “because they are incompatible“. Collection has a method add(Object o). Map can not have such method because it need key-value pair. There are other reasons also such as Map supports keySet, valueSet etc. Collection classes does not have such views.</p>
<p>Due to such big differences, Collection interface was not used in Map interface, and it was build in separate hierarchy.</p>
<p>array to arraylist<br>Integer[] nums = {1,2,3,4};<br>List numsList = Arrays.asList(nums);</p>
<p>reverse list<br>Collections.reverse(list);</p>
<p>10) Can a null element added to a TreeSet or HashSet?</p>
<p>As you see, There is no null check in add() method in previous question. And HashMap also allows one null key, so one “null” is allowed in HashSet.</p>
<p>TreeSet uses NavigableMap for storing the elements.<br>NavigableMap is subtype of SortedMap which does not allow null keys. So essentially, TreeSet also does not support null keys.</p>
<p>17) When to use HashMap or TreeMap?<br>TreeMap is special form of HashMap. It maintains the ordering of keys which is missing in HashMap class. This ordering is by default “natural ordering”. The default ordering can be override by providing an instance of Comparator class, whose compare method will be used to maintain ordering of keys.</p>
<p>25) Difference between TreeSet and SortedSet?<br>SortedSet is an interface which TreeSet implements</p>
<p>32) What is difference between fail-fast and fail-safe?<br>Fail-fast Iterators fail as soon as they realized that structure of Collection has been changed since iteration has begun. </p>
<p>Fail-safe iterators are just opposite to fail-fast. They never fail if you modify the underlying collection on which they are iterating, because they work on clone of Collection instead of original collection.</p>
<p>Iterator of CopyOnWriteArrayList is an example of fail-safe Iterator also iterator written by ConcurrentHashMap keySet is also fail-safe iterator and never throw ConcurrentModificationException.</p>
<p>35) Which collection classes provide random access of it’s elements?</p>
<p>ArrayList, HashMap, TreeMap, Hashtable classes provide random access to it’s elements.</p>
<p>3) Why Collection interface does not extend Cloneable and Serializable interface?</p>
<p>Well, simplest answer is “there is no need to do it“.not everybody will have a reason to have Cloneable collection because if it has very large data, then every unnecessary clone operation will consume a big memory.</p>
<p>What is the benefit of Generics in Collections Framework?<br>Stronger type checks at compile time.<br>Elimination of casts.<br>Enabling programmers to implement generic algorithms that work on collections of different types.</p>
<p>How to avoid ConcurrentModificationException while iterating a collection?</p>
<p>We can use concurrent collection classes to avoid ConcurrentModificationException while iterating over a collection, for example CopyOnWriteArrayList instead of ArrayList.<br>Check this post for ConcurrentHashMap Example.</p>
<h3 id="Can_we_use_any_class_as_Map_key_3F"><a href="#Can_we_use_any_class_as_Map_key_3F" class="headerlink" title="Can we use any class as Map key?"></a>Can we use any class as Map key?</h3><p>If the class overrides equals() method, it should also override hashCode() method.<br>The class should follow the rules associated with equals() and hashCode() for all instances.</p>
<p>Best practice for user defined key class is to make it immutable, so that hashCode() value can be cached for fast performance. Also immutable classes make sure that hashCode() and equals() will not change in future that will solve any issue with mutability.</p>
<p>Which collection classes provide random access of it’s elements?<br>ArrayList, HashMap, TreeMap, Hashtable classes provide random access to it’s elements. </p>
<p>Which collection classes are thread-safe?<br>Vector, Hashtable, Properties and Stack are synchronized classes, so they are thread-safe</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[System Design Reading List]]></title>
      <url>http://ninefu.github.io/blog/System_Design_Reading_List/</url>
      <content type="html"><![CDATA[<p>Why do we need system design</p>
<ul>
<li>Novice, <a href="http://url.cn/ZrlZtf" target="_blank" rel="external">http://url.cn/ZrlZtf</a></li>
<li>Novice, <a href="http://url.cn/YrnOHy" target="_blank" rel="external">http://url.cn/YrnOHy</a></li>
</ul>
<ol>
<li><p><strong>Design Netflix</strong></p>
<p> <strong>General</strong></p>
<ul>
<li>Expert, <a href="http://url.cn/fn5mWs" target="_blank" rel="external">http://url.cn/fn5mWs</a></li>
<li>Expert, <a href="http://url.cn/cehN0N" target="_blank" rel="external">http://url.cn/cehN0N</a></li>
<li>Expert/Master, <a href="http://url.cn/Ui5CoP" target="_blank" rel="external">http://url.cn/Ui5CoP</a></li>
<li><p>Master, <a href="http://url.cn/d2fblH" target="_blank" rel="external">http://url.cn/d2fblH</a></p>
<p><strong>Data</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/UVzYRH" target="_blank" rel="external">http://url.cn/UVzYRH</a></p>
</li>
<li><p>Expert, <a href="http://url.cn/eRn6Ff" target="_blank" rel="external">http://url.cn/eRn6Ff</a></p>
<p><strong>Recommendation module</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/Shsrpd" target="_blank" rel="external">http://url.cn/Shsrpd</a></p>
<p><strong>Improve performance with inverted index</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/VoPF6w" target="_blank" rel="external">http://url.cn/VoPF6w</a></p>
<p><strong>Homework</strong></p>
</li>
<li><p><a href="http://www.jiuzhang.com/qa/50/" target="_blank" rel="external">http://www.jiuzhang.com/qa/50/</a></p>
</li>
</ul>
</li>
<li><p><strong>Design Database</strong></p>
<p> <strong>User</strong></p>
<ul>
<li><p>Novice, <a href="http://url.cn/ZtCS09" target="_blank" rel="external">http://url.cn/ZtCS09</a></p>
<p><strong>User Table</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/ZjEKOm" target="_blank" rel="external">http://url.cn/ZjEKOm</a></p>
<p><strong>User V2</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/HtwOCR" target="_blank" rel="external">http://url.cn/HtwOCR</a></p>
</li>
<li><p>Expert, <a href="http://url.cn/agKqsn" target="_blank" rel="external">http://url.cn/agKqsn</a></p>
<p><strong>Session</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/YTXtU6" target="_blank" rel="external">http://url.cn/YTXtU6</a></p>
</li>
<li>Expert, <a href="http://url.cn/g8faDE" target="_blank" rel="external">http://url.cn/g8faDE</a></li>
<li><p>Master, <a href="http://url.cn/LsyovG" target="_blank" rel="external">http://url.cn/LsyovG</a></p>
<p><strong>Inheritance</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/TW5RYp" target="_blank" rel="external">http://url.cn/TW5RYp</a></p>
</li>
<li>Expert, <a href="http://url.cn/aaAS9U" target="_blank" rel="external">http://url.cn/aaAS9U</a></li>
<li><p>Master, <a href="http://url.cn/bFkGUj" target="_blank" rel="external">http://url.cn/bFkGUj</a></p>
<p><strong>Index with Hash</strong></p>
</li>
<li><p>Master, <a href="http://url.cn/0IP1eQ" target="_blank" rel="external">http://url.cn/0IP1eQ</a></p>
<p><strong>Index with BST</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/T4dvVH" target="_blank" rel="external">http://url.cn/T4dvVH</a></p>
<p><strong>Index with B+ tree</strong></p>
</li>
<li><p>Master, <a href="http://url.cn/UnKnTc" target="_blank" rel="external">http://url.cn/UnKnTc</a></p>
</li>
<li>Master, <a href="http://url.cn/DA3mKn" target="_blank" rel="external">http://url.cn/DA3mKn</a></li>
<li><p>Master, <a href="http://url.cn/3sLkWT" target="_blank" rel="external">http://url.cn/3sLkWT</a></p>
<p><strong>Transaction log</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/Sp4ORB" target="_blank" rel="external">http://url.cn/Sp4ORB</a></p>
</li>
<li>Master, <a href="http://url.cn/Ni1lxL" target="_blank" rel="external">http://url.cn/Ni1lxL</a></li>
<li><p>Diamond, <a href="http://url.cn/OAwnmr" target="_blank" rel="external">http://url.cn/OAwnmr</a></p>
<p><strong>Duplication</strong></p>
</li>
<li><p>Master, <a href="http://url.cn/bsBiDk" target="_blank" rel="external">http://url.cn/bsBiDk</a></p>
</li>
<li><p>Master, <a href="http://url.cn/d1BrZU" target="_blank" rel="external">http://url.cn/d1BrZU</a></p>
<p><strong>ACID</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/UsRaJS" target="_blank" rel="external">http://url.cn/UsRaJS</a></p>
</li>
<li><p>Master, <a href="http://url.cn/SJdvlr" target="_blank" rel="external">http://url.cn/SJdvlr</a></p>
<p><strong>Design Paypal</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/iTJ1JF" target="_blank" rel="external">http://url.cn/iTJ1JF</a></p>
</li>
<li>Expert, <a href="http://url.cn/2eHHsU" target="_blank" rel="external">http://url.cn/2eHHsU</a></li>
<li><p>Expert/Master, <a href="http://url.cn/kPMc7X" target="_blank" rel="external">http://url.cn/kPMc7X</a></p>
<p><strong>Homework</strong></p>
</li>
<li><p><a href="http://www.jiuzhang.com/qa/88/" target="_blank" rel="external">http://www.jiuzhang.com/qa/88/</a></p>
</li>
</ul>
</li>
<li><p><strong>Web Crawler &amp; Tiny URL</strong></p>
<p> <strong>General</strong></p>
<ul>
<li><p>Novice/Expert/Master, <a href="http://url.cn/f8Jgl4" target="_blank" rel="external">http://url.cn/f8Jgl4</a></p>
<p><strong>Crawl a page in Python</strong></p>
</li>
<li><p>Novice/Expert/Master, <a href="http://url.cn/NEHw7J" target="_blank" rel="external">http://url.cn/NEHw7J</a></p>
</li>
<li>Novice/Expert, <a href="http://url.cn/ZANYur" target="_blank" rel="external">http://url.cn/ZANYur</a></li>
<li>Expert, <a href="http://url.cn/agT8mg" target="_blank" rel="external">http://url.cn/agT8mg</a></li>
<li>Expert, <a href="http://url.cn/SOBO8x" target="_blank" rel="external">http://url.cn/SOBO8x</a></li>
<li><p>Expert/Master, <a href="http://url.cn/1eHONm" target="_blank" rel="external">http://url.cn/1eHONm</a></p>
<p><strong>Call center vs. Web server</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/PPdzXg" target="_blank" rel="external">http://url.cn/PPdzXg</a></p>
</li>
<li><p>Master, <a href="http://url.cn/UqYdJV" target="_blank" rel="external">http://url.cn/UqYdJV</a></p>
<p><strong>Layers</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/ZX9hMs" target="_blank" rel="external">http://url.cn/ZX9hMs</a></p>
</li>
<li><p>Master, <a href="http://url.cn/RTPIgV" target="_blank" rel="external">http://url.cn/RTPIgV</a></p>
<p><strong>Web page</strong></p>
</li>
<li><p>Novice/Expert/Master, <a href="http://url.cn/3Tdi9B" target="_blank" rel="external">http://url.cn/3Tdi9B</a></p>
<p><strong>Identify the link of news</strong></p>
</li>
<li><p>Novice/Expert, <a href="http://url.cn/TWdTap" target="_blank" rel="external">http://url.cn/TWdTap</a></p>
</li>
<li>Novice/Expert, <a href="http://url.cn/a8U9VH" target="_blank" rel="external">http://url.cn/a8U9VH</a></li>
<li><p>Expert/Master, <a href="http://url.cn/dI93as" target="_blank" rel="external">http://url.cn/dI93as</a></p>
<p><strong>Conditional Variable</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/44qusn" target="_blank" rel="external">http://url.cn/44qusn</a></p>
</li>
<li>Novice, <a href="http://url.cn/cYsLZ3" target="_blank" rel="external">http://url.cn/cYsLZ3</a></li>
<li>Expert, <a href="http://url.cn/coAAeW" target="_blank" rel="external">http://url.cn/coAAeW</a></li>
<li>Expert, <a href="http://url.cn/TNVxRu" target="_blank" rel="external">http://url.cn/TNVxRu</a></li>
<li><p>Expert, <a href="http://url.cn/edIy1C" target="_blank" rel="external">http://url.cn/edIy1C</a></p>
<p><strong>Semaphore</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/XWQJWo" target="_blank" rel="external">http://url.cn/XWQJWo</a></p>
</li>
<li>Novice, <a href="http://url.cn/g7xO6G" target="_blank" rel="external">http://url.cn/g7xO6G</a></li>
<li>Expert, <a href="http://url.cn/daQTsi" target="_blank" rel="external">http://url.cn/daQTsi</a></li>
<li>Expert, <a href="http://url.cn/YUG6Nd" target="_blank" rel="external">http://url.cn/YUG6Nd</a></li>
<li><p>Expert/Master, <a href="http://url.cn/a9NI3i" target="_blank" rel="external">http://url.cn/a9NI3i</a></p>
<p><strong>Thread-safe consumer and producer</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/cNG8WK" target="_blank" rel="external">http://url.cn/cNG8WK</a></p>
</li>
<li>Expert, <a href="http://url.cn/cFPpaN" target="_blank" rel="external">http://url.cn/cFPpaN</a></li>
<li>Expert, <a href="http://url.cn/C1lIpq" target="_blank" rel="external">http://url.cn/C1lIpq</a></li>
<li>Expert/Master, <a href="http://url.cn/6CCw4i" target="_blank" rel="external">http://url.cn/6CCw4i</a></li>
<li>Master, <a href="http://url.cn/9kdFF2" target="_blank" rel="external">http://url.cn/9kdFF2</a></li>
<li>Master, <a href="http://url.cn/ORvrlX" target="_blank" rel="external">http://url.cn/ORvrlX</a></li>
<li><p>Master, <a href="http://url.cn/dYRtFj" target="_blank" rel="external">http://url.cn/dYRtFj</a></p>
<p><strong>Design TinyURL</strong></p>
</li>
<li><p>Novice, <a href="https://goo.gl/" target="_blank" rel="external">https://goo.gl/</a></p>
</li>
<li>Novice/Expert, <a href="http://url.cn/bycYvq" target="_blank" rel="external">http://url.cn/bycYvq</a></li>
<li>Novice/Expert/Master, <a href="http://url.cn/aXRa8e" target="_blank" rel="external">http://url.cn/aXRa8e</a></li>
<li><p>Expert, <a href="http://url.cn/euBds7" target="_blank" rel="external">http://url.cn/euBds7</a></p>
<p><strong>Follow up</strong></p>
</li>
<li><p>Master, <a href="http://url.cn/dr4uux" target="_blank" rel="external">http://url.cn/dr4uux</a></p>
</li>
<li>Novice, <a href="http://www.xn--vi8hiv.ws/" target="_blank" rel="external">http://www.xn--vi8hiv.ws/</a></li>
</ul>
</li>
<li><p><strong>Web Service and Rate Limiter</strong></p>
<p> <strong>Visiting</strong></p>
<ul>
<li><p>Book, <a href="http://url.cn/69ymwC" target="_blank" rel="external">http://url.cn/69ymwC</a></p>
<p><strong>How to identify a user in web server</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/ekitAe" target="_blank" rel="external">http://url.cn/ekitAe</a> Expert</p>
</li>
<li><p>Master, <a href="http://url.cn/YXlLcz" target="_blank" rel="external">http://url.cn/YXlLcz</a></p>
<p><strong>How to collect the data of failure rate</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/bfddpB" target="_blank" rel="external">http://url.cn/bfddpB</a></p>
</li>
<li><p>Expert, <a href="http://url.cn/4ffk7f" target="_blank" rel="external">http://url.cn/4ffk7f</a></p>
<p><strong>What is the process of playing music</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/XEgh6x" target="_blank" rel="external">http://url.cn/XEgh6x</a></p>
</li>
<li>Master, <a href="http://url.cn/Y1Lv3V" target="_blank" rel="external">http://url.cn/Y1Lv3V</a></li>
<li>Expert, <a href="http://url.cn/eqCFbY" target="_blank" rel="external">http://url.cn/eqCFbY</a></li>
<li>Expert, <a href="http://url.cn/bGKraS" target="_blank" rel="external">http://url.cn/bGKraS</a></li>
<li>Master, <a href="http://url.cn/7tnaFV" target="_blank" rel="external">http://url.cn/7tnaFV</a></li>
<li><p>Expert, <a href="http://url.cn/ewsXrs" target="_blank" rel="external">http://url.cn/ewsXrs</a></p>
<p>**Reverse proxy with more servers</p>
</li>
<li><p>Novice, <a href="http://url.cn/ccjApK" target="_blank" rel="external">http://url.cn/ccjApK</a></p>
</li>
<li>Novice, <a href="http://url.cn/dNj6oD" target="_blank" rel="external">http://url.cn/dNj6oD</a></li>
<li>Expert, <a href="http://url.cn/cO2IbS" target="_blank" rel="external">http://url.cn/cO2IbS</a></li>
<li><p>Expert, <a href="http://url.cn/bnLZTx" target="_blank" rel="external">http://url.cn/bnLZTx</a></p>
<p><strong>Reduce the size of webpage</strong></p>
</li>
<li><p>Novice: <a href="http://url.cn/bRZz2M" target="_blank" rel="external">http://url.cn/bRZz2M</a></p>
</li>
<li><p>Novice: <a href="http://url.cn/dZAjfO" target="_blank" rel="external">http://url.cn/dZAjfO</a></p>
<p><strong>More cacheable pages</strong></p>
</li>
<li><p>Expert: <a href="http://url.cn/ePPuo6" target="_blank" rel="external">http://url.cn/ePPuo6</a></p>
<p><strong>Content Delivery Work</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/eIedBf" target="_blank" rel="external">http://url.cn/eIedBf</a></p>
</li>
<li>Expert, <a href="http://url.cn/ZWQrzC" target="_blank" rel="external">http://url.cn/ZWQrzC</a></li>
<li><p>Master, <a href="http://url.cn/ksWuax" target="_blank" rel="external">http://url.cn/ksWuax</a></p>
<p><strong>What is the problem</strong></p>
</li>
<li><p>Master: <a href="http://url.cn/SLedbA" target="_blank" rel="external">http://url.cn/SLedbA</a></p>
<p><strong>Rate Limiter</strong></p>
</li>
<li><p>Novice/Expert, <a href="http://url.cn/80Ylun" target="_blank" rel="external">http://url.cn/80Ylun</a></p>
</li>
<li>Master, <a href="http://url.cn/dVVjyr" target="_blank" rel="external">http://url.cn/dVVjyr</a></li>
<li><p>Master, <a href="http://url.cn/c5KSaU" target="_blank" rel="external">http://url.cn/c5KSaU</a></p>
<p><strong>Algorithm of time-bucket with Database</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/bC1Nvd" target="_blank" rel="external">http://url.cn/bC1Nvd</a></p>
</li>
<li>Expert, <a href="http://url.cn/cxdYo3" target="_blank" rel="external">http://url.cn/cxdYo3</a></li>
<li><p>Master, <a href="http://url.cn/bIbLsr" target="_blank" rel="external">http://url.cn/bIbLsr</a></p>
<p><strong>Algorithm of Token Bucket</strong></p>
</li>
<li><p>Expert, <a href="http://url.cn/cxmNy2" target="_blank" rel="external">http://url.cn/cxmNy2</a></p>
</li>
<li>Expert, <a href="http://url.cn/TaEtSw" target="_blank" rel="external">http://url.cn/TaEtSw</a></li>
<li><p>Expert, <a href="http://url.cn/dWlSB3" target="_blank" rel="external">http://url.cn/dWlSB3</a></p>
<p><strong>秒杀</strong></p>
</li>
<li><p>Novice, <a href="http://url.cn/WaKqHR" target="_blank" rel="external">http://url.cn/WaKqHR</a></p>
</li>
<li>Novice, <a href="http://url.cn/dd88AI" target="_blank" rel="external">http://url.cn/dd88AI</a></li>
<li>Novice, <a href="http://url.cn/fRH9hi" target="_blank" rel="external">http://url.cn/fRH9hi</a></li>
<li>Expert, <a href="http://url.cn/aw3MJe" target="_blank" rel="external">http://url.cn/aw3MJe</a></li>
<li>Expert/Master, <a href="http://url.cn/cTJ5aP" target="_blank" rel="external">http://url.cn/cTJ5aP</a></li>
<li><p>Master, <a href="http://url.cn/ZfSCTT" target="_blank" rel="external">http://url.cn/ZfSCTT</a></p>
<p><strong>Homework: 12306</strong></p>
</li>
<li><p><a href="http://www.jiuzhang.com/qa/107/" target="_blank" rel="external">http://www.jiuzhang.com/qa/107/</a></p>
</li>
<li>Expert, <a href="http://url.cn/UgpSk7" target="_blank" rel="external">http://url.cn/UgpSk7</a></li>
<li>Expert, <a href="http://url.cn/7paBUZ" target="_blank" rel="external">http://url.cn/7paBUZ</a></li>
<li>Master, <a href="http://url.cn/1DVxxa" target="_blank" rel="external">http://url.cn/1DVxxa</a></li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dice Game Probability]]></title>
      <url>http://ninefu.github.io/blog/Dice_Game_Probability/</url>
      <content type="html"><![CDATA[<p>You are playing a game of dice with a friend. Your friend will roll one die, and you must pay the hunber of dollars for the number they roll. What should you charge you friend to play this game, if you want to break even in the long run? This value is the “fair value” of the game. It’s easy to see that for a one roll game, the fair value is 3.5</p>
<p>Extend this to a game with up to 2 rolls of the die: you friend can either stop at the first roll, and keep that number, or choose to roll again, but then must take the 2nd number. Assume your friend will take the first roll if the number on the die is more than the fair value if they roll again. Otherwise, they’ll choose to roll again (effectively playing a 1 roll game). What should you charge your friend to play this 2 roll game to break even in the long run.</p>
<p>Extend this to a game with up to N rolls of the die. They can roll again up to N times (each time playing the game with one less roll), but must take the last roll if they choose to roll the last time.</p>
<p>Write a function that computes the “fair value” for an N-roll game, where N is an integer larger than 0.</p>
<p>Here is an example of a 3-roll game, assuming you’ve decide the fair value is <code>$3</code>: Your friend gives you <code>$3</code>. Your friend rolls a 1, and decides to rll again (they know the fair value of a 2 roll game is more than 1). They roll again, this time is a 2; they decided to roll gain since they know that a one roll game’s fair value is 3.5. On the last roll, your friend roll s a 1. So you pay <code>$1</code> and your net gain is <code>$2</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">die_game_fair_value</span><span class="params">(rolls)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> (rolls ==<span class="number">1</span> ):</span><br><span class="line">		<span class="keyword">return</span> int(<span class="number">3.5</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		array = [<span class="number">3.5</span>]</span><br><span class="line">		i = <span class="number">1</span></span><br><span class="line">		<span class="keyword">while</span> (i &lt; rolls):</span><br><span class="line">			res = int(array[i - <span class="number">1</span>])/<span class="number">6.0</span> * array[i-<span class="number">1</span>] + <span class="number">1</span>/<span class="number">6.0</span> * (<span class="number">6</span>+ int(array[i-<span class="number">1</span>]) + <span class="number">1</span>) * (<span class="number">6</span> - int(array[i-<span class="number">1</span>])) / <span class="number">2.0</span></span><br><span class="line">			array.append(res)</span><br><span class="line">			i += <span class="number">1</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> int(array[rolls - <span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[3D Array Size]]></title>
      <url>http://ninefu.github.io/blog/3D_Array_Size/</url>
      <content type="html"><![CDATA[<p>Given a number, return true if this number is the total number of elements in a 3D array or false if it’s not. For each dimension, the number of elements should be at least 2, i.e., the smallest number that is the size of a 3D array is 8.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_3d_array_size</span><span class="params">(a_size)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> (a_size &lt; <span class="number">8</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">	factor = <span class="number">2</span></span><br><span class="line">	dim = <span class="number">3</span></span><br><span class="line">	<span class="keyword">while</span> (dim &gt; <span class="number">0</span>):</span><br><span class="line">		<span class="keyword">if</span> (a_size % factor == <span class="number">0</span>):</span><br><span class="line">			a_size /= factor</span><br><span class="line">			dim -= <span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span> (a_size == <span class="number">1</span> <span class="keyword">and</span> dim &gt; <span class="number">0</span>):</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			factor += <span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span> (factor &gt; a_size):</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	i = <span class="number">1</span></span><br><span class="line">	<span class="comment"># a test case, it's known that 12 should return true since 12 = 2 * 2 * 3 </span></span><br><span class="line">	<span class="keyword">print</span> is_3d_array_size(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Notes for Harvard CS75 Web Development Lecture 9 Scalability by David Malan]]></title>
      <url>http://ninefu.github.io/blog/Harvard_CS75_Notes/</url>
      <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=-W9F__D3oY4&amp;list=WL&amp;index=1" target="_blank" rel="external">Lecture 9 video</a></p>
<h2 id="Web_Hosts"><a href="#Web_Hosts" class="headerlink" title="Web Hosts"></a>Web Hosts</h2><p>Features: </p>
<ul>
<li>Is IP address blocked in some countries/regions?</li>
<li>SFTP vs. FTP. SFTP is secure and all the traffic is encrypted, which is important for user names and passwords</li>
<li>Some hosting companies may offer you some unbelievable features, like unlimited storage spac, at a very low price. It’s very likely that you and another hundreds users are sharing the same machine and contending for resources. This is because sometime people actually don’t need that many resources.</li>
<li>Virtual private server. May still share one machine with other users, but you have your own copy of the operating system. Run multiple virtual machine on a physical machine. Only you and the system administrators have access to your files</li>
<li>If you want more privacy, then probably you have to operate your own servers</li>
</ul>
<p>AWS EC2</p>
<h2 id="How_to_scale"><a href="#How_to_scale" class="headerlink" title="How to scale"></a>How to scale</h2><h3 id="Vertical_Scaling"><a href="#Vertical_Scaling" class="headerlink" title="Vertical Scaling"></a>Vertical Scaling</h3><p>Get more RAM, processors, disks,…, for one machine, but you will exhaust the financial resources/state of arts technology.</p>
<h3 id="Horizontal_Scaling"><a href="#Horizontal_Scaling" class="headerlink" title="Horizontal Scaling"></a>Horizontal Scaling</h3><p>Plural number of machines, use multiple servers to build the topology.</p>
<h4 id="Load_Balancer"><a href="#Load_Balancer" class="headerlink" title="Load Balancer"></a>Load Balancer</h4><p>Need to distriubte inbound HTTP requests</p>
<p>Return the public IP address of the load balancer, and let the load balancer determin how to actually route data to the backend server (private address).</p>
<p><strong>Implementation</strong></p>
<ul>
<li>Dedicated servers for gifs, jpegs, images, videos, etc for different host HTTP header</li>
<li>Round robin. Or, the load balancer can be a DNS setup which returns the IP address of server 1 when the first time someone asks for a url, then return the IP address of server 2 when the second time someone asks for the same url, then server 3, server 4,…, eventually wrapping up. Downside: one server may get a really computational heavy user; </li>
<li>Based on the load on a server</li>
<li>Have a server specifically for storing sessions. But what if that machine breaks down. Lacks redundacy. Can add RAID (redundant array of independent disks), striping and redundancy</li>
</ul>
<p>When we type the url in the browser and hit enter, the OS will send a packet to DNS server which will translate host names to IPs and vice versa. If we click a link on a website, there is a cache to store the IP address so the OS doesn’t have to send the same DNS request again. Both OS and browser have a cache. Time to Live (TTL) values associated with an answer from a DNS server, 5 minutes, 1 hour, or 1 day. Global load balancing…</p>
<p>If the backend is PHP based and the session in PHP is broken. And if you were on Server 1, then by chance you are sent to Server 2 by a round-robin, you might have to log in again. Or think about shopping cart.</p>
<p><strong>Stick sessions </strong>(when you visit a website multiple times your session is somehow preserve even if there are multiple backend servers)</p>
<p><strong>Cookies</strong>:<br>Can store the address of the server so the next the user visit the website, he goes to the same back-end server. Downside: the private IP of the back-end server may change; the private IP is now visible to the whole world</p>
<p>==&gt;</p>
<p>Store a random number and let the load balancer remember which number belongs to which server</p>
<ul>
<li>Software<ul>
<li>ELB</li>
<li>HAProxy</li>
<li>LVS</li>
</ul>
</li>
<li>Hardware<ul>
<li>Barracuda</li>
<li>Cisco</li>
<li>Citrix</li>
<li>F5      </li>
</ul>
</li>
</ul>
<p>PHP Acceleration<br>php.exe compiles php everytime but throws away the result. Some software can keep the result. Like .py vs. .pyc.</p>
<p>Caching</p>
<ul>
<li>.html vs. MySQL database/XML (avoid regenerating) more performance vs. more space. But requires a lot of work when want to update/redesign the page</li>
<li>MySQL query cache: query_cache_type: 1</li>
<li>memchached: store whatever you want in RAM (garbage collection: expire objects based on when they are put in)</li>
</ul>
<h4 id="Replication_3A"><a href="#Replication_3A" class="headerlink" title="Replication:"></a>Replication:</h4><p><strong>Master-Slave</strong></p>
<p>Master: the main database that you write/read data to/from.<br>Slave: anytime a query is executed on the<br>master that same query is copied down to one or more slaves and they do the exact same thing </p>
<p>Advantages: </p>
<ul>
<li>If the master is down, promote one of the slaves and do some configuration. (redundacy) </li>
<li>If there are a lot queries, you could just load balance across database servers</li>
<li>For read heavy websites, any select can go to all four databases, while any insert/update/delete has to go to server master</li>
</ul>
<p><strong>Mastter-Master</strong></p>
<p>you could write to either server one or two and if you happen to write to server1 that query gets replicated on server2 and vice versa so now you could keep it simple</p>
<h4 id="Load_balancing_+_Replication"><a href="#Load_balancing_+_Replication" class="headerlink" title="Load balancing + Replication"></a>Load balancing + Replication</h4><p>active + active pair of load balancers<br>active + passive pair of load balancers, passive promote itself when receives no more packets from the active one.<br>and send packets to each other </p>
<p><strong>Partitioning</strong><br>A-M cluster and O-Z cluster</p>
<p><strong>High Availability</strong><br>One load balancer, two master replicating each other</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Internet ==(TCP <span class="number">443</span> <span class="number">80</span>)=<span class="function">=&gt;</span> </span><br><span class="line">two load balancers ==(TCP <span class="number">80</span>)=<span class="function">=&gt;</span> </span><br><span class="line">web servers ==x=<span class="function">=&gt;</span> </span><br><span class="line">two load balancers ==x (TCP <span class="number">3306</span>)=<span class="function">=&gt;</span> </span><br><span class="line">two &lt;==X=<span class="function">=&gt;</span>  master databases </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fire wall <span class="literal">on</span> <span class="keyword">switch</span> ports</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Power of Three]]></title>
      <url>http://ninefu.github.io/blog/Power_of_Three/</url>
      <content type="html"><![CDATA[<p>Given an integer, write a function to determine if it is a power of three.</p>
<p>Follow up:<br>Could you do it without using any loop / recursion?</p>
<a id="more"></a>
<h4 id="Iterative_soltuion"><a href="#Iterative_soltuion" class="headerlink" title="Iterative soltuion"></a>Iterative soltuion</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                n /= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Recursive_solution"><a href="#Recursive_solution" class="headerlink" title="Recursive solution"></a>Recursive solution</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n == <span class="number">1</span> || (n % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; isPowerOfThree(n / <span class="number">3</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Math_solutions"><a href="#Math_solutions" class="headerlink" title="Math solutions"></a>Math solutions</h4><p>Cited from Leetcode Discussion board</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find the maximum power of 3 first</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxPower = (<span class="keyword">int</span>) Math.pow(<span class="number">3</span>, (<span class="keyword">int</span>)(Math.log(<span class="number">0x7fffffff</span>) / Math.log(<span class="number">3</span>)));</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; maxPower % n == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> )&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> (Math.log10(n) / Math.log10(<span class="number">3</span>)) % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n==<span class="number">0</span> ? <span class="keyword">false</span> : n==Math.pow(<span class="number">3</span>, Math.round(Math.log(n) / Math.log(<span class="number">3</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] allPowerOfThree = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">27</span>, <span class="number">81</span>, <span class="number">243</span>, <span class="number">729</span>, <span class="number">2187</span>, <span class="number">6561</span>, <span class="number">19683</span>, <span class="number">59049</span>, <span class="number">177147</span>, <span class="number">531441</span>, <span class="number">1594323</span>, <span class="number">4782969</span>, <span class="number">14348907</span>, <span class="number">43046721</span>, <span class="number">129140163</span>, <span class="number">387420489</span>, <span class="number">1162261467</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> Arrays.binarySearch(allPowerOfThree, n) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Radix-3_Solution"><a href="#Radix-3_Solution" class="headerlink" title="Radix-3 Solution"></a>Radix-3 Solution</h4><p>cited from Leetcode Discussion board</p>
<blockquote>
<p>The idea is that the ternary number that is power of 3 will be something like 10,100,1000, etc, analogous to binary numbers that are powers of 2.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.toString(n, <span class="number">3</span>).matches(<span class="string">"10*"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Contains Duplicate II]]></title>
      <url>http://ninefu.github.io/blog/Contains_Duplicate_II/</url>
      <content type="html"><![CDATA[<p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.</p>
<!--more>

#### HashMap

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">if</span> ((i - map.get(nums[i])) &lt;= k)&#123;<span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>Cited from Leetcode Discussion board</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">		Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i &gt; k) set.remove(nums[i-k-<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(!set.add(nums[i])) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Majority Element]]></title>
      <url>http://ninefu.github.io/blog/Majority_Element/</url>
      <content type="html"><![CDATA[<p>Given an array of size n, find the majority element. The majority element is the element that appears more than <code>n/2</code> times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<a id="more"></a>
<h4 id="Sorting_3A_O_28n_log_n_29_time_2C_O_281_29_space"><a href="#Sorting_3A_O_28n_log_n_29_time_2C_O_281_29_space" class="headerlink" title="Sorting: O(n log n) time, O(1) space"></a>Sorting: O(n log n) time, O(1) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[nums.length / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Divide_and_Conquer_3A_O_28n_log_n_29_time_2C_O_281_29_space"><a href="#Divide_and_Conquer_3A_O_28n_log_n_29_time_2C_O_281_29_space" class="headerlink" title="Divide and Conquer: O(n log n) time, O(1) space"></a>Divide and Conquer: O(n log n) time, O(1) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> majority(nums,<span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majority</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right)&#123;<span class="keyword">return</span> nums[left];&#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> lm = majority(nums, left, mid);</span><br><span class="line">        <span class="keyword">int</span> rm = majority(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">if</span> (lm == rm)&#123;<span class="keyword">return</span> lm;&#125;</span><br><span class="line">        <span class="keyword">return</span> count(nums,left,right, lm) &gt; count(nums,left, right, rm) ? lm: rm;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == num)&#123;count++;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Hash_Table_3A_O_28n_29_time_2C_O_28n_29_space"><a href="#Hash_Table_3A_O_28n_29_time_2C_O_28n_29_space" class="headerlink" title="Hash Table: O(n) time, O(n) space"></a>Hash Table: O(n) time, O(n) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(nums[i]))&#123;</span><br><span class="line">                map.put(nums[i], map.get(nums[i]) + <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(nums[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.get(nums[i]) &gt; length/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Boyer-Moore_Majority_Vote_Algorithm_3A_O_28n_29_time_2C_O_281_29_space"><a href="#Boyer-Moore_Majority_Vote_Algorithm_3A_O_28n_29_time_2C_O_281_29_space" class="headerlink" title="Boyer-Moore Majority Vote Algorithm: O(n) time, O(1) space"></a>Boyer-Moore Majority Vote Algorithm: O(n) time, O(1) space</h4><p><a href="http://www.cs.utexas.edu/~moore/best-ideas/mjrty/" target="_blank" rel="external">Algorithm source</a></p>
<p>Another helpful <a href="http://gregable.com/2013/10/majority-vote-algorithm-find-majority.html" target="_blank" rel="external">post</a> about this algorithm.</p>
<blockquote>
<p>Basic idea of the algorithm is if we cancel out each occurrence of an element e with all the other elements that are different from e then e will exist till end if it is a majority element.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = nums[<span class="number">0</span>], count = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">                cur = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == cur)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[i] != cur)&#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// can add a second O(n) pass to confirm that this number is</span></span><br><span class="line">        <span class="comment">// indeed the majority element by counting its frequency</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Randomization_2C_3ms"><a href="#Randomization_2C_3ms" class="headerlink" title="Randomization, 3ms"></a>Randomization, 3ms</h4><p>Adapted from Leetcode Discussion Board</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx = rd.nextInt(length);</span><br><span class="line">            <span class="keyword">int</span> candidate = nums[idx];</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] == candidate)</span><br><span class="line">                    count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; length / <span class="number">2</span>) &#123;<span class="keyword">return</span> candidate;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Bit_Manipulation"><a href="#Bit_Manipulation" class="headerlink" title="Bit Manipulation"></a>Bit Manipulation</h4><p>Cited from Leetcode Discussion Board</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] bit = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) </span><br><span class="line">            <span class="keyword">if</span> ((num &gt;&gt; (<span class="number">31</span>-i) &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                bit[i]++;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        bit[i]= bit[i]&gt;nums.length/<span class="number">2</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        ret += bit[i]*(<span class="number">1</span>&lt;&lt;(<span class="number">31</span>-i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>or </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> ones = <span class="number">0</span>, zeros = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((num[j] &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                ++ones;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ++zeros;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ones &gt; zeros)</span><br><span class="line">            ret |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Valid Parentheses]]></title>
      <url>http://ninefu.github.io/blog/Valid_Parentheses/</url>
      <content type="html"><![CDATA[<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span> || s.length() % <span class="number">2</span> == <span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> cur = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="string">'&#123;'</span> || cur == <span class="string">'['</span> || cur == <span class="string">'('</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="string">'&#125;'</span> &amp;&amp; !stack.empty() &amp;&amp; stack.peek() == <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="string">']'</span> &amp;&amp; !stack.empty() &amp;&amp; stack.peek() == <span class="string">'['</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="string">')'</span> &amp;&amp; !stack.empty() &amp;&amp; stack.peek() == <span class="string">'('</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Contains Duplicate]]></title>
      <url>http://ninefu.github.io/blog/Contains_Duplicate/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>
<a id="more"></a>
<p>O(N<sup>2</sup>) time O(1) memory, TLE, cited from Leetcode Discussion Board</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(nums[i] == nums[j]) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(N log N) time O(1) memory, TLE, cited from Leetcode Discussion Board</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">	Arrays.sort(nums);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> ind = <span class="number">1</span>; ind &lt; nums.length; ind++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(nums[ind] == nums[ind - <span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(N log N) time O(1) memory</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Excel Sheet Column Number]]></title>
      <url>http://ninefu.github.io/blog/Excel_Sheet_Column_Number/</url>
      <content type="html"><![CDATA[<p>Related to question Excel Sheet Column Title</p>
<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<a id="more"></a>
<p>For example:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A <span class="subst">-&gt; </span><span class="number">1</span></span><br><span class="line">B <span class="subst">-&gt; </span><span class="number">2</span></span><br><span class="line">C <span class="subst">-&gt; </span><span class="number">3</span></span><br><span class="line"><span class="attribute">...</span></span><br><span class="line">Z <span class="subst">-&gt; </span><span class="number">26</span></span><br><span class="line">AA <span class="subst">-&gt; </span><span class="number">27</span></span><br><span class="line">AB <span class="subst">-&gt; </span><span class="number">28</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> cur = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur &lt; <span class="string">'A'</span> || cur &gt; <span class="string">'Z'</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            col = col * <span class="number">26</span> + (<span class="keyword">int</span>) (cur - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> col;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unique Word Abbreviation]]></title>
      <url>http://ninefu.github.io/blog/Unique_Word_Abbreviation/</url>
      <content type="html"><![CDATA[<p>An abbreviation of a word follows the form <first letter=""><number><last letter="">. Below are some examples of word abbreviations:</last></number></first></p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a) it                      --&gt; it    (no abbreviation)</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">b) d|o|g                   --&gt; d1g</span><br><span class="line"></span><br><span class="line">              <span class="number">1</span>    <span class="number">1</span>  <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>---<span class="number">5</span>----<span class="number">0</span>----<span class="number">5</span>--<span class="number">8</span></span><br><span class="line">c) i|nternationalizatio|n  --&gt; i18n</span><br><span class="line"></span><br><span class="line">              <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>---<span class="number">5</span>----<span class="number">0</span></span><br><span class="line">d) l|ocalizatio|n          --&gt; l10n</span><br></pre></td></tr></table></figure>
<p>Assume you have a dictionary and given a word, find whether its abbreviation is unique in the dictionary. A word’s abbreviation is unique if no other word from the dictionary has the same abbreviation.</p>
<p>Example: </p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given dictionary = [ <span class="string">"deer"</span>, <span class="string">"door"</span>, <span class="string">"cake"</span>, <span class="string">"card"</span> ]</span><br><span class="line"></span><br><span class="line">isUnique<span class="function"><span class="params">(<span class="string">"dear"</span>)</span> -&gt;</span> <span class="literal">false</span></span><br><span class="line">isUnique<span class="function"><span class="params">(<span class="string">"cart"</span>)</span> -&gt;</span> <span class="literal">true</span></span><br><span class="line">isUnique<span class="function"><span class="params">(<span class="string">"cane"</span>)</span> -&gt;</span> <span class="literal">false</span></span><br><span class="line">isUnique<span class="function"><span class="params">(<span class="string">"make"</span>)</span> -&gt;</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidWordAbbr</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidWordAbbr</span><span class="params">(String[] dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String s : dictionary)&#123;</span><br><span class="line">            String abbr = getAbbr(s);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(abbr))&#123;</span><br><span class="line">                <span class="keyword">if</span> (!map.get(abbr).equals(s))&#123;</span><br><span class="line">                    map.put(abbr,<span class="string">""</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(abbr,s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnique</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        String abbr = getAbbr(word);</span><br><span class="line">        <span class="keyword">return</span> !map.containsKey(abbr) || map.get(abbr).equals(word);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAbbr</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">3</span>)&#123;<span class="keyword">return</span> s;&#125;</span><br><span class="line">        Integer length = s.length() - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> s.substring(<span class="number">0</span>,<span class="number">1</span>) + length.toString() + s.substring(s.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Your ValidWordAbbr object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// ValidWordAbbr vwa = new ValidWordAbbr(dictionary);</span></span><br><span class="line"><span class="comment">// vwa.isUnique("Word");</span></span><br><span class="line"><span class="comment">// vwa.isUnique("anotherWord");</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Meeting Rooms]]></title>
      <url>http://ninefu.github.io/blog/Meeting_Rooms/</url>
      <content type="html"><![CDATA[<p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si &lt; ei), determine if a person could attend all meetings.</p>
<a id="more"></a>
<p>For example,<br>Given [[0, 30],[5, 10],[15, 20]],<br>return false.</p>
<p>O(nlogn).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canAttendMeetings</span><span class="params">(Interval[] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;Interval&gt;()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval a, Interval b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a.start - b.start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i + <span class="number">1</span>].start &lt; intervals[i].end)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The following two solutions are cited from Leetcode Discussion board.</p>
<p>####Find an overlap while sorting.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">canAttendMeetings</span><span class="params">(Interval[] intervals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> IntervalComparator());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Interval</span>&gt; </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Interval o1, Interval o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o1.start &lt; o2.start &amp;&amp; o1.end &lt;= o2.start)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (o1.start &gt; o2.start &amp;&amp; o1.start &gt;= o2.end)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####Use lambda function in Java 8</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canAttendMeetings</span><span class="params">(Interval[] intervals)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Sort the intervals by start time</span></span><br><span class="line">    Arrays.sort(intervals, (x, y) -&gt; x.start - y.start);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (intervals[i-<span class="number">1</span>].end &gt; intervals[i].start)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Valid Anagram]]></title>
      <url>http://ninefu.github.io/blog/Valid_Anagram/</url>
      <content type="html"><![CDATA[<p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>
<a id="more"></a>
<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>
<p>Follow up:<br>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>
<p>O(2n + 26)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span> || s.length() != t.length())&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            counts[s.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">            counts[t.charAt(i) - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; counts.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (counts[j] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="HashMap_solution_for_the_follow_up"><a href="#HashMap_solution_for_the_follow_up" class="headerlink" title="HashMap solution for the follow up"></a>HashMap solution for the follow up</h4><p>O(2n)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span> || s.length() != t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> cur = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(cur))&#123;</span><br><span class="line">                map.put(cur, map.get(cur) + <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(cur, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.length(); j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> Cur = t.charAt(j);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(Cur))&#123;</span><br><span class="line">                <span class="keyword">int</span> count = map.get(Cur) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">                    map.remove(Cur);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(Cur, count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Compare Version Numbers]]></title>
      <url>http://ninefu.github.io/blog/Compare_Version_Numbers/</url>
      <content type="html"><![CDATA[<p>Compare two version numbers version1 and version2.<br>If version1 &gt; version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.</p>
<p>You may assume that the version strings are non-empty and contain only digits and the . character.<br>The . character does not represent a decimal point and is used to separate number sequences.<br>For instance, 2.5 is not “two and a half” or “half way to version three”, it is the fifth second-level revision of the second first-level revision.</p>
<p>Here is an example of version numbers ordering:</p>
<p>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(String version1, String version2)</span> </span>&#123;</span><br><span class="line">        String[] v1 = version1.split(<span class="string">"\\."</span>);</span><br><span class="line">        String[] v2 = version2.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">int</span> length = Math.max(v1.length, v2.length), l1 = v1.length, l2 = v2.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            Integer i1 = (i &gt;= l1) ? <span class="number">0</span> : Integer.parseInt(v1[i]);</span><br><span class="line">            Integer i2 = (i &gt;= l2) ? <span class="number">0</span> : Integer.parseInt(v2[i]);</span><br><span class="line">            <span class="keyword">int</span> compare = i1.compareTo(i2);</span><br><span class="line">            <span class="keyword">if</span> (compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Same Tree]]></title>
      <url>http://ninefu.github.io/blog/Same_Tree/</url>
      <content type="html"><![CDATA[<p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<a id="more"></a>
<h4 id="Recursive_solution"><a href="#Recursive_solution" class="headerlink" title="Recursive solution"></a>Recursive solution</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="keyword">null</span> || q == <span class="keyword">null</span>) <span class="keyword">return</span> p == q;</span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Iterative_solution"><a href="#Iterative_solution" class="headerlink" title="Iterative solution"></a>Iterative solution</h4><p>From Leetcode Discussion board</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">		Stack&lt;TreeNode&gt; stack_p = <span class="keyword">new</span> Stack &lt;&gt; ();       </span><br><span class="line">		Stack&lt;TreeNode&gt; stack_q = <span class="keyword">new</span> Stack &lt;&gt; ();</span><br><span class="line">		<span class="keyword">if</span> (p != <span class="keyword">null</span>) stack_p.push( p ) ;</span><br><span class="line">		<span class="keyword">if</span> (q != <span class="keyword">null</span>) stack_q.push( q ) ;</span><br><span class="line">		<span class="keyword">while</span> (!stack_p.isEmpty() &amp;&amp; !stack_q.isEmpty()) &#123;</span><br><span class="line">			TreeNode pn = stack_p.pop() ;</span><br><span class="line">			TreeNode qn = stack_q.pop() ;          </span><br><span class="line">			<span class="keyword">if</span> (pn.val != qn.val) <span class="keyword">return</span> <span class="keyword">false</span> ;</span><br><span class="line">			<span class="keyword">if</span> (pn.right != <span class="keyword">null</span>) stack_p.push(pn.right) ;</span><br><span class="line">			<span class="keyword">if</span> (qn.right != <span class="keyword">null</span>) stack_q.push(qn.right) ;</span><br><span class="line">			<span class="keyword">if</span> (stack_p.size() != stack_q.size()) <span class="keyword">return</span> <span class="keyword">false</span> ;</span><br><span class="line">			<span class="keyword">if</span> (pn.left != <span class="keyword">null</span>) stack_p.push(pn.left) ;                        </span><br><span class="line">			<span class="keyword">if</span> (qn.left != <span class="keyword">null</span>) stack_q.push(qn.left) ;</span><br><span class="line">			<span class="keyword">if</span> (stack_p.size() != stack_q.size()) <span class="keyword">return</span> <span class="keyword">false</span> ;</span><br><span class="line">		&#125;           </span><br><span class="line">		<span class="keyword">return</span> stack_p.size() == stack_q.size() ;   </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Size Subarray Sum Equals K]]></title>
      <url>http://ninefu.github.io/blog/Maximum_Size_Subarray_Sum_Equals_k/</url>
      <content type="html"><![CDATA[<p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn’t one, return 0 instead.</p>
<a id="more"></a>
<p>Example 1:<br>Given nums = [1, -1, 5, -2, 3], k = 3,<br>return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)</p>
<p>Example 2:<br>Given nums = [-2, -1, 2, 1], k = 1,<br>return 2. (because the subarray [-1, 2] sums to 1 and is the longest)</p>
<p>Follow Up:<br>Can you do it in O(n) time?</p>
<p>Brute force solution (TLC :( )</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArrayLen</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> copy = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            k = copy;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; nums.length; j++)&#123;</span><br><span class="line">                k -= nums[j];</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">0</span>)&#123;</span><br><span class="line">                    length = Math.max(length, j - i + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(n) solution</p>
<blockquote>
<p>The HashMap stores the sum of all elements before index i as key, and i as value. For each i, check not only the current sum but also (currentSum - previousSum) to see if there is any that equals k, and update max length (from Leetcode discussion board)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArrayLen</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            sum = sum + nums[i];</span><br><span class="line">            <span class="keyword">if</span> (sum == k)&#123;max = i + <span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (map.containsKey(sum - k))&#123;</span><br><span class="line">                max = Math.max(max, i - map.get(sum - k));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(sum))&#123;</span><br><span class="line">                map.put(sum, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Invert Binary Tree]]></title>
      <url>http://ninefu.github.io/blog/Invert_Binary_Tree/</url>
      <content type="html"><![CDATA[<p>Invert a binary tree.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">2</span>     <span class="number">7</span></span><br><span class="line"> / \   / \</span><br><span class="line"><span class="number">1</span>   <span class="number">3</span> <span class="number">6</span>   <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>to</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     <span class="number">4</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">7</span>     <span class="number">2</span></span><br><span class="line"> / \   / \</span><br><span class="line"><span class="number">9</span>   <span class="number">6</span> <span class="number">3</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>####Recursive solution</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        </span><br><span class="line">        TreeNode left = root.left;</span><br><span class="line">        TreeNode right = root.right;</span><br><span class="line">        root.left = invertTree(right);</span><br><span class="line">        root.right = invertTree(left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####Iterative Solution</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// BFS/level order traversal if using a queue, DFS if using a stack</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;(); </span><br><span class="line">        </span><br><span class="line">        queue.add(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(queue.peek() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            TreeNode cur = queue.poll();</span><br><span class="line">            TreeNode temp = cur.left;</span><br><span class="line">            cur.left = cur.right;</span><br><span class="line">            cur.right = temp;</span><br><span class="line">            <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(cur.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Move Zeroes]]></title>
      <url>http://ninefu.github.io/blog/Move_Zeroes/</url>
      <content type="html"><![CDATA[<p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>Note:<br>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> insert = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num != <span class="number">0</span>)&#123;</span><br><span class="line">                nums[insert++] = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (insert &lt; nums.length)&#123;</span><br><span class="line">            nums[insert++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Number of 1 Bits]]></title>
      <url>http://ninefu.github.io/blog/Number_of_One_Bits/</url>
      <content type="html"><![CDATA[<p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>
<p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">            count = count + (n &amp; <span class="number">1</span>);</span><br><span class="line">            n = n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Another solution which works faster. x &amp; (x-1) helps to remove right most 1 for x (from Leetcode Discussion board).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            n = n &amp; (n-<span class="number">1</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Remove Elements]]></title>
      <url>http://ninefu.github.io/blog/Remove_Elements/</url>
      <content type="html"><![CDATA[<p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length, i = <span class="number">0</span>, end = length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val)&#123;</span><br><span class="line">                nums[i] = nums[end];</span><br><span class="line">                end--;</span><br><span class="line">                length--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Most voted solution on Leetcode</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> elem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    	<span class="keyword">if</span>(A[i] != elem) A[begin++] = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shortest Word Distance]]></title>
      <url>http://ninefu.github.io/blog/Shortest_Word_Distance/</url>
      <content type="html"><![CDATA[<p>Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.</p>
<p>For example,<br>Assume that words = [“practice”, “makes”, “perfect”, “coding”, “makes”].</p>
<p>Given word1 = “coding”, word2 = “practice”, return 3.<br>Given word1 = “makes”, word2 = “coding”, return 1.</p>
<p>Note:<br>You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shortestDistance</span><span class="params">(String[] words, String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>, dist = Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (words[i].equals(word1) || words[i].equals(word2))&#123;</span><br><span class="line">                <span class="keyword">if</span> (index != -<span class="number">1</span> &amp;&amp; !words[index].equals(words[i]))&#123;</span><br><span class="line">                    dist = Math.min(dist, i - index);</span><br><span class="line">                &#125;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist == Integer.MAX_VALUE ? -<span class="number">1</span> : dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[203.Remove Linked List Elements]]></title>
      <url>http://ninefu.github.io/blog/203.Remove_Linked_List_Elements/</url>
      <content type="html"><![CDATA[<p>Remove all elements from a linked list of integers that have value val.</p>
<p>Example<br>Given: 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6, val = 6<br>Return: 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5</p>
<a id="more"></a>
<h4 id="Iterative_solution_with_dummy_2C_O_28n_29_time_O_281_29_space"><a href="#Iterative_solution_with_dummy_2C_O_28n_29_time_O_281_29_space" class="headerlink" title="Iterative solution with dummy, O(n) time O(1) space"></a>Iterative solution with dummy, O(n) time O(1) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        head = dummy;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; head.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (head.next.val == val)&#123;</span><br><span class="line">                head.next = head.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Iterative_solution_without_dummy_2C_O_28n_29_time_O_281_29_space"><a href="#Iterative_solution_without_dummy_2C_O_28n_29_time_O_281_29_space" class="headerlink" title="Iterative solution without dummy, O(n) time O(1) space"></a>Iterative solution without dummy, O(n) time O(1) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; head.val == val) head = head.next;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span> &amp;&amp; curr.next != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">if</span> (curr.next.val == val) curr.next = curr.next.next;</span><br><span class="line">            <span class="keyword">else</span> curr = curr.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Recursive_solution_2C_O_28n_29_time_O_28n_29_space"><a href="#Recursive_solution_2C_O_28n_29_time_O_28n_29_space" class="headerlink" title="Recursive solution, O(n) time O(n) space"></a>Recursive solution, O(n) time O(n) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span> head.val == val? head.next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Delete Node in a Linked List]]></title>
      <url>http://ninefu.github.io/blog/Delete_Node_in_a_Linked_List/</url>
      <content type="html"><![CDATA[<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[206.Reverse Linked List]]></title>
      <url>http://ninefu.github.io/blog/206.Reverse_LinkedList/</url>
      <content type="html"><![CDATA[<p>Reverse a singly linked list.</p>
<a id="more"></a>
<p>Iterative</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode next = head.next;</span><br><span class="line">            head.next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Recursive</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reverseListInt(head, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseListInt</span><span class="params">(ListNode head, ListNode newHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    ListNode next = head.next;</span><br><span class="line">    head.next = newHead;</span><br><span class="line">    <span class="keyword">return</span> reverseListInt(next, head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String to Integer (Atoi)]]></title>
      <url>http://ninefu.github.io/blog/String_to_Integer_(atoi)/</url>
      <content type="html"><![CDATA[<p>Implement atoi to convert a string to an integer.</p>
<p>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>
<a id="more"></a>
<p>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>, sign = <span class="number">1</span>, total = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1. Empty string</span></span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//2. Remove Spaces</span></span><br><span class="line">        <span class="keyword">while</span>(str.charAt(index) == <span class="string">' '</span> &amp;&amp; index &lt; str.length())</span><br><span class="line">            index ++;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//3. Handle signs</span></span><br><span class="line">        <span class="keyword">if</span>(str.charAt(index) == <span class="string">'+'</span> || str.charAt(index) == <span class="string">'-'</span>)&#123;</span><br><span class="line">            sign = str.charAt(index) == <span class="string">'+'</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//4. Convert number and avoid overflow</span></span><br><span class="line">        <span class="keyword">while</span>(index &lt; str.length())&#123;</span><br><span class="line">            <span class="keyword">int</span> digit = str.charAt(index) - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(digit &lt; <span class="number">0</span> || digit &gt; <span class="number">9</span>) <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">//check if total will be overflow after 10 times and add digit</span></span><br><span class="line">            <span class="keyword">if</span>(Integer.MAX_VALUE/<span class="number">10</span> &lt; total || Integer.MAX_VALUE/<span class="number">10</span> == total &amp;&amp; Integer.MAX_VALUE %<span class="number">10</span> &lt; digit)</span><br><span class="line">                <span class="keyword">return</span> sign == <span class="number">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</span><br><span class="line">    </span><br><span class="line">            total = <span class="number">10</span> * total + digit;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Integer]]></title>
      <url>http://ninefu.github.io/blog/Reverse_Integer/</url>
      <content type="html"><![CDATA[<p>Reverse digits of an integer.</p>
<p>Example1: x = 123, return 321</p>
<p>Example2: x = -123, return -321</p>
<a id="more"></a>
<p>My solution:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> neg = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            neg = <span class="keyword">true</span>;</span><br><span class="line">            x = -x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            rev = rev * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (rev &gt; (<span class="keyword">long</span>) Integer.MAX_VALUE)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span> (neg)&#123;rev = -rev;&#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Most two voted solution on Leetcode</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> newR = rev * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> ((newR - x % <span class="number">10</span>) / <span class="number">10</span> != rev)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            rev = newR;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> rev= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( x != <span class="number">0</span>)&#123;</span><br><span class="line">            rev= rev*<span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x= x/<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>( rev &gt; Integer.MAX_VALUE || rev &lt; Integer.MIN_VALUE)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Number]]></title>
      <url>http://ninefu.github.io/blog/Palindrome_Number/</url>
      <content type="html"><![CDATA[<p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<a id="more"></a>
<p>It turns out that there is no need to prevent overflow when reversing the integer. Palindrome of X will result in a negative number because of overflow, and that makes it never equals to the input number x</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//if (x &lt; 0 || x == Integer.MAX_VALUE)&#123;return false;&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> old = x, cur = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            cur = cur * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> old == cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A solution that prevents overflow.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( x &lt; <span class="number">0</span> || (x != <span class="number">0</span> &amp;&amp; x % <span class="number">10</span> == <span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// half of the digits</span></span><br><span class="line">        <span class="keyword">while</span>(x &gt; sum)&#123;</span><br><span class="line">            sum = sum * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x/= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// even || odd </span></span><br><span class="line">        <span class="keyword">return</span> (x == sum) || (x == sum/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sparse Matrix Multiplication]]></title>
      <url>http://ninefu.github.io/blog/Sparse_Matrix_Multiplication/</url>
      <content type="html"><![CDATA[<p>Given two sparse matrices A and B, return the result of AB.</p>
<p>You may assume that A’s column number is equal to B’s row number.</p>
<p><strong>Example</strong>:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A = [</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">B = [</span><br><span class="line">  [ <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span> ],</span><br><span class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ],</span><br><span class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     |  <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> |   | <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> |   |  <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> |</span><br><span class="line">AB = | -<span class="number">1</span> <span class="number">0</span> <span class="number">3</span> | x | <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | = | -<span class="number">7</span> <span class="number">0</span> <span class="number">3</span> |</span><br><span class="line">                  | <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> |</span><br></pre></td></tr></table></figure>
<h4 id="Optimized_brute_force"><a href="#Optimized_brute_force" class="headerlink" title="Optimized brute force"></a>Optimized brute force</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] multiply(<span class="keyword">int</span>[][] A, <span class="keyword">int</span>[][] B) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = A.length, column = B[<span class="number">0</span>].length, colA = A[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[row][column];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; colA; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; column; k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (B[j][k] != <span class="number">0</span>)&#123;</span><br><span class="line">                            res[i][k] += A[i][j] * B[j][k];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, this solution still checks matrix B multiple times.</p>
<h4 id="One_hash_table_that_build_index_for_non-zero_values_in_each_row_of_Matrix_B"><a href="#One_hash_table_that_build_index_for_non-zero_values_in_each_row_of_Matrix_B" class="headerlink" title="One hash table that build index for non-zero values in each row of Matrix B"></a>One hash table that build index for non-zero values in each row of Matrix B</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] multiply(<span class="keyword">int</span>[][] A, <span class="keyword">int</span>[][] B) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A[<span class="number">0</span>] == <span class="keyword">null</span> || B == <span class="keyword">null</span> || B[<span class="number">0</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> m = A.length, n = A[<span class="number">0</span>].length, l = B[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] C = <span class="keyword">new</span> <span class="keyword">int</span>[m][l];</span><br><span class="line">        Map&lt;Integer, HashMap&lt;Integer, Integer&gt;&gt; tableB = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">            tableB.put(k, <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (B[k][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    tableB.get(k).put(j, B[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][k] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer j: tableB.get(k).keySet()) &#123;</span><br><span class="line">                        C[i][j] += A[i][k] * tableB.get(k).get(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Two_hash_tables_for_both_matrix_A_and_B"><a href="#Two_hash_tables_for_both_matrix_A_and_B" class="headerlink" title="Two hash tables for both matrix A and B"></a>Two hash tables for both matrix A and B</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] multiply(<span class="keyword">int</span>[][] A, <span class="keyword">int</span>[][] B) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || B == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[<span class="number">0</span>].length != B.length) </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"A's column number must be equal to B's row number."</span>);</span><br><span class="line">        Map&lt;Integer, HashMap&lt;Integer, Integer&gt;&gt; tableA = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, HashMap&lt;Integer, Integer&gt;&gt; tableB = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[][] C = <span class="keyword">new</span> <span class="keyword">int</span>[A.length][B[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(tableA.get(i) == <span class="keyword">null</span>) tableA.put(i, <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;());</span><br><span class="line">                    tableA.get(i).put(j, A[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (B[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(tableB.get(i) == <span class="keyword">null</span>) tableB.put(i, <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;());</span><br><span class="line">                    tableB.get(i).put(j, B[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer i: tableA.keySet()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer k: tableA.get(i).keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tableB.containsKey(k)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (Integer j: tableB.get(k).keySet()) &#123;</span><br><span class="line">                    C[i][j] += tableA.get(i).get(k) * tableB.get(k).get(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maximum Depth of Binary Tree]]></title>
      <url>http://ninefu.github.io/blog/Maximum_Depth_of_Binary_Tree/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root != <span class="keyword">null</span> ? (<span class="number">1</span> + Math.max(maxDepth(root.left), maxDepth(root.right))) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Palindromic String]]></title>
      <url>http://ninefu.github.io/blog/Longest%20Palindromic%20String/</url>
      <content type="html"><![CDATA[<p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, maxLength = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.length() - i &lt;= maxLength / <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> j = i, k = i;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// skip duplicates</span></span><br><span class="line">            <span class="keyword">while</span> (k &lt; s.length() - <span class="number">1</span> &amp;&amp; s.charAt(k + <span class="number">1</span>) == s.charAt(k))&#123;k++;&#125; </span><br><span class="line">            <span class="comment">// reset i</span></span><br><span class="line">            i = k + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// expand</span></span><br><span class="line">            <span class="keyword">while</span> (k &lt; s.length() - <span class="number">1</span> &amp;&amp; j &gt; <span class="number">0</span> &amp;&amp; s.charAt(k + <span class="number">1</span>) == s.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                k++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (maxLength &lt; k - j + <span class="number">1</span>)&#123;</span><br><span class="line">                start = j;</span><br><span class="line">                maxLength = k - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + maxLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Single Number]]></title>
      <url>http://ninefu.github.io/blog/Single_Number/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<a id="more"></a>
<h4 id="O_28n_29_time_2C_O_28n_29_space"><a href="#O_28n_29_time_2C_O_28n_29_space" class="headerlink" title="O(n) time, O(n) space"></a>O(n) time, O(n) space</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; <span class="built_in">set</span> = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">set</span>.add(nums[i]))&#123;</span><br><span class="line">                <span class="built_in">set</span>.remove(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] <span class="built_in">array</span> = <span class="built_in">set</span>.toArray();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="O_28n_29_time_2C_O_281_29_space"><a href="#O_28n_29_time_2C_O_281_29_space" class="headerlink" title="O(n) time, O(1) space"></a>O(n) time, O(1) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Add Digits]]></title>
      <url>http://ninefu.github.io/blog/Add_Digits/</url>
      <content type="html"><![CDATA[<p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<p>For example:</p>
<p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                sum += num % <span class="number">10</span>;</span><br><span class="line">                num /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Without_any_loop/recursion_in_O_281_29_runtime"><a href="#Without_any_loop/recursion_in_O_281_29_runtime" class="headerlink" title="Without any loop/recursion in O(1) runtime"></a>Without any loop/recursion in O(1) runtime</h4><p>See explanaton on <a href="https://en.wikipedia.org/wiki/Digital_root" target="_blank" rel="external">Wikipedia</a> or <a href="https://leetcode.com/discuss/52122/accepted-time-space-line-solution-with-detail-explanations" target="_blank" rel="external">discussion on Leetcode</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flip Game]]></title>
      <url>http://ninefu.github.io/blog/Flip_Game/</url>
      <content type="html"><![CDATA[<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: <code>+</code> and <code>-</code>, you and your friend take turns to flip two consecutive <code>&quot;++&quot;</code> into <code>&quot;--&quot;</code>. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>
<p>Write a function to compute all possible states of the string after one valid move.</p>
<p>For example, given <code>s = &quot;++++&quot;</code>, after one move, it may become one of the following states:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"--++"</span>,</span><br><span class="line">  <span class="string">"+--+"</span>,</span><br><span class="line">  <span class="string">"++--"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>If there is no valid move, return an empty list [].</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generatePossibleNextMoves</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(i + <span class="number">1</span>) &amp;&amp; s.charAt(i) == <span class="string">'+'</span>)&#123;</span><br><span class="line">                res.add(s.substring(<span class="number">0</span>, i) + <span class="string">"--"</span> + s.substring(i + <span class="number">2</span>, s.length()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Permutation]]></title>
      <url>http://ninefu.github.io/blog/Palindrome_Permutation/</url>
      <content type="html"><![CDATA[<p>Given a string, determine if a permutation of the string could form a palindrome.</p>
<p>For example,<br>“code” -&gt; False, “aab” -&gt; True, “carerac” -&gt; True.</p>
<a id="more"></a>
<p>One pass without counters.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPermutePalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(s.charAt(i)))&#123;</span><br><span class="line">                set.remove(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> set.size() &lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using a Bitset</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPermutePalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    BitSet bs = <span class="keyword">new</span> BitSet();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : s.getBytes())</span><br><span class="line">        bs.flip(b);</span><br><span class="line">    <span class="keyword">return</span> bs.cardinality() &lt; <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nim Game]]></title>
      <url>http://ninefu.github.io/blog/Nim_Game/</url>
      <content type="html"><![CDATA[<p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>
<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>
<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">4</span> != <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Median of Two Sorted Arrays]]></title>
      <url>http://ninefu.github.io/blog/Median_of_Two_Sorted_Arrays/</url>
      <content type="html"><![CDATA[<p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<a id="more"></a>
<p>Compare the median of nums1 and nums2. If nums1’s median is smaller than nums2’s median, then compare the right half of nums1 and the left half of nums2 for the next iteration, or vice versa. Do this recursively until k = 1.</p>
<p>Time complexity O(log(m+n))</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length, n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> l = (m + n + <span class="number">1</span>)/<span class="number">2</span>, r = (m + n + <span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (getKth(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,l) + getKth(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,r))/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> aStart, <span class="keyword">int</span>[] b, <span class="keyword">int</span> bStart, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aStart &gt; a.length - <span class="number">1</span>)&#123;<span class="keyword">return</span> b[bStart + k - <span class="number">1</span>];&#125;</span><br><span class="line">        <span class="keyword">if</span> (bStart &gt; b.length - <span class="number">1</span>)&#123;<span class="keyword">return</span> a[aStart + k - <span class="number">1</span>];&#125;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)&#123;<span class="keyword">return</span> Math.min(a[aStart],b[bStart]);&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> aMid = Integer.MAX_VALUE, bMid = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span> ((aStart + k/<span class="number">2</span> - <span class="number">1</span>) &lt; a.length) aMid = a[aStart + k/<span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> ((bStart + k/<span class="number">2</span> - <span class="number">1</span>) &lt; b.length) bMid = b[bStart + k/<span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (aMid &lt; bMid)&#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(a, aStart + k/<span class="number">2</span>, b, bStart, k-k/<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(a, aStart, b, bStart + k/<span class="number">2</span>, k-k/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or an O(log(min(m,n))) iterative solution (<a href="https://leetcode.com/discuss/41621/very-concise-iterative-solution-with-detailed-explanation" target="_blank" rel="external">explanation</a>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N1 = nums1.size();</span><br><span class="line">    <span class="keyword">int</span> N2 = nums2.size();</span><br><span class="line">    <span class="keyword">if</span> (N1 &lt; N2) <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1);   <span class="comment">// Make sure A2 is the shorter one.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (N2 == <span class="number">0</span>) <span class="keyword">return</span> ((<span class="keyword">double</span>)nums1[(N1-<span class="number">1</span>)/<span class="number">2</span>] + (<span class="keyword">double</span>)nums1[N1/<span class="number">2</span>])/<span class="number">2</span>;  <span class="comment">// If A2 is empty</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = N2 * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid2 = (lo + hi) / <span class="number">2</span>;   <span class="comment">// Try Cut 2 </span></span><br><span class="line">        <span class="keyword">int</span> mid1 = N1 + N2 - mid2;  <span class="comment">// Calculate Cut 1 accordingly</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> L1 = (mid1 == <span class="number">0</span>) ? INT_MIN : nums1[(mid1-<span class="number">1</span>)/<span class="number">2</span>];  <span class="comment">// Get L1, R1, L2, R2 respectively</span></span><br><span class="line">        <span class="keyword">double</span> L2 = (mid2 == <span class="number">0</span>) ? INT_MIN : nums2[(mid2-<span class="number">1</span>)/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">double</span> R1 = (mid1 == N1 * <span class="number">2</span>) ? INT_MAX : nums1[(mid1)/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">double</span> R2 = (mid2 == N2 * <span class="number">2</span>) ? INT_MAX : nums2[(mid2)/<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (L1 &gt; R2) lo = mid2 + <span class="number">1</span>;     <span class="comment">// A1's lower half is too big; need to move C1 left (C2 right)</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L2 &gt; R1) hi = mid2 - <span class="number">1</span>;    <span class="comment">// A2's lower half too big; need to move C2 left.</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (max(L1,L2) + min(R1, R2)) / <span class="number">2</span>; <span class="comment">// Otherwise, that's the right cut.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Substring Without Repeating Characters]]></title>
      <url>http://ninefu.github.io/blog/Longest_Substring_Without_Repeating_Characters/</url>
      <content type="html"><![CDATA[<p>Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for “abcabcbb” is “abc”, which the length is 3. For “bbbbb” the longest substring is “b”, with the length of 1.</p>
<a id="more"></a>
<h4 id="O_28n_29_time_2C_O_28n_29_space"><a href="#O_28n_29_time_2C_O_28n_29_space" class="headerlink" title="O(n) time, O(n) space"></a>O(n) time, O(n) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; cache = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cache.containsKey(s.charAt(i)))&#123;</span><br><span class="line">                <span class="comment">// if the char has appeared before, move the left pointer to the right of the previous position</span></span><br><span class="line">                <span class="comment">// compare with the current j value</span></span><br><span class="line">                j = Math.max(j,cache.get(s.charAt(i)) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            cache.put(s.charAt(i), i);</span><br><span class="line">            max = Math.max(max, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[002.Add Two Numbers]]></title>
      <url>http://ninefu.github.io/blog/002.Add_Two_Numbers/</url>
      <content type="html"><![CDATA[<p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode head = dummy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span> || sum != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                sum += l1.val;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                sum += l2.val;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode next = <span class="keyword">new</span> ListNode((sum) % <span class="number">10</span>);</span><br><span class="line">            head.next = next;</span><br><span class="line">            head = head.next;</span><br><span class="line">            sum /= <span class="number">10</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Two Sum]]></title>
      <url>http://ninefu.github.io/blog/Two_Sum/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Input: numbers={2, 7, 11, 15}, target=9</p>
<p>Output: index1=1, index2=2</p>
<a id="more"></a>
<h4 id="O_28n_29_time_2C_O_28n_29_space"><a href="#O_28n_29_time_2C_O_28n_29_space" class="headerlink" title="O(n) time, O(n) space"></a>O(n) time, O(n) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>)&#123;<span class="keyword">return</span> res;&#125;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; expected = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (expected.containsKey(nums[i]))&#123;</span><br><span class="line">                res[<span class="number">0</span>] = expected.get(nums[i]) + <span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                expected.put(target - nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="O_28n2_29_time_2C_O_281_29_space"><a href="#O_28n2_29_time_2C_O_281_29_space" class="headerlink" title="O(n2) time, O(1) space"></a>O(n<sup>2</sup>) time, O(1) space</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] n = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (target == (nums[i] + nums[j]))&#123;</span><br><span class="line">                    n[<span class="number">0</span>] = i+<span class="number">1</span>;</span><br><span class="line">                    n[<span class="number">1</span>] = j+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Snail]]></title>
      <url>http://ninefu.github.io/blog/Snail/</url>
      <content type="html"><![CDATA[<p>A snail in a well can climbs 3 meters up in the day, and slide 2 meters down at the night. Given the height of the well h, how many days does it take for the snail to climb out of the well?</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Snail</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> distance; <span class="comment">// distance to the top</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> height; <span class="comment">// wall height</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Snail</span><span class="params">()</span></span>&#123;</span><br><span class="line">		distance = <span class="number">0</span>;</span><br><span class="line">	   height = <span class="number">0</span>;</span><br><span class="line">	   day = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">	   height = high;</span><br><span class="line">	&#125;</span><br><span class="line">	  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDistance</span><span class="params">(<span class="keyword">int</span> dist)</span></span>&#123;</span><br><span class="line">		distance = dist;</span><br><span class="line">	&#125;</span><br><span class="line">	  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">day</span><span class="params">()</span></span>&#123;</span><br><span class="line">	    <span class="keyword">if</span> (distance &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">	    	System.out.println(<span class="string">"This snail has climbed out of wall"</span>);</span><br><span class="line">	    	<span class="keyword">return</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    distance -= <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">night</span><span class="params">()</span></span>&#123;</span><br><span class="line">	  	<span class="keyword">if</span> (distance &gt; <span class="number">0</span> &amp;&amp; distance &lt; height)&#123;</span><br><span class="line">	  		day += <span class="number">1</span>;</span><br><span class="line">	  		distance += <span class="number">2</span>;</span><br><span class="line">	  	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span></span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> day;</span><br><span class="line">	&#125;</span><br><span class="line">	  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDistance</span><span class="params">()</span></span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> distance;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	    Snail snail = <span class="keyword">new</span> Snail();</span><br><span class="line">	    <span class="comment">// the well is 10 meters tall</span></span><br><span class="line">	    snail.setHeight(<span class="number">10</span>);</span><br><span class="line">	    snail.setDistance(<span class="number">10</span>);</span><br><span class="line">	    </span><br><span class="line">	    <span class="keyword">while</span> (snail.getDistance() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">	      snail.day();</span><br><span class="line">	      snail.night();</span><br><span class="line">	    &#125;</span><br><span class="line">	    System.out.println(snail.getDay());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scramble Pairs]]></title>
      <url>http://ninefu.github.io/blog/Scramble_Pairs/</url>
      <content type="html"><![CDATA[<p>Let a pair of distinct positive integers, (i, j), be considered “scrambled” if you can obtain j by reordering the digits of i.  For example, (12345, 25341) is a scrambled pair, but (12345, 67890) is not.</p>
<p>Given integers A and B with the same number of digits and no leading zeroes, how many distinct scrambled pairs (i, j) are there that satisfy: A &lt;= i &lt; j &lt;= B?</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scramble</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * Calculate the number of distinct scrambled pairs within the given range</span><br><span class="line">    * <span class="doctag">@param</span> min, the minimum value</span><br><span class="line">    * <span class="doctag">@param</span> max, the maximum value </span><br><span class="line">    * <span class="doctag">@return</span> the number of distinct scrambled pairs within the given range</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">scrambleCalculator</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        <span class="comment">// make sure min is actually smaller than max</span></span><br><span class="line">        <span class="keyword">if</span> (min &gt;= max)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// cache for visited scramble integers in the range to avoid duplicate</span></span><br><span class="line">        Set&lt;Integer&gt; cache = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// initialize total scrambled pair count</span></span><br><span class="line">        <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// for each integer in the range:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &lt;= max; i++)&#123;</span><br><span class="line">            <span class="comment">// if this integer is not in the cache, then we haven't calculated</span></span><br><span class="line">            <span class="comment">// the number of its scrambled pairs:</span></span><br><span class="line">            <span class="keyword">if</span> (!cache.contains(i))&#123;</span><br><span class="line">				</span><br><span class="line">            <span class="comment">//convert to digits</span></span><br><span class="line">            List&lt;Integer&gt; digits = intToDigits(i);</span><br><span class="line">				</span><br><span class="line">            <span class="comment">//compute permutation for this combination of digits</span></span><br><span class="line">            Set&lt;Integer&gt; res = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">            permutation(res, digits, min, max, <span class="number">0</span>, <span class="number">0</span>, digits.size());</span><br><span class="line">				</span><br><span class="line">            <span class="comment">// compute pair count and update total count</span></span><br><span class="line">            count += countPairs((<span class="keyword">long</span>) res.size());</span><br><span class="line">				</span><br><span class="line">            <span class="comment">// add permutations into the cache</span></span><br><span class="line">            <span class="keyword">if</span> (res.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                cache.addAll(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * Recursively visit the digits combination and get the permutations of the given</span><br><span class="line">    *  digits combination within the range. For example, if the digits are [1,2,3], </span><br><span class="line">    *  then we get the following permutations in order: 123, 132, 213, 231, 312, 321,</span><br><span class="line">    *  assuming the range is from 100 to 999.</span><br><span class="line">    * <span class="doctag">@param</span> total, a set to store the permutations that meet the requirements</span><br><span class="line">    * <span class="doctag">@param</span> digits, a list of digits of the original number</span><br><span class="line">    * <span class="doctag">@param</span> min, the minimum value</span><br><span class="line">    * <span class="doctag">@param</span> max, the maximum value</span><br><span class="line">    * <span class="doctag">@param</span> value, a permutation of the given digits when it reaches the length of the original integer</span><br><span class="line">    * <span class="doctag">@param</span> pos, the number of digits we have "built" for a permutation</span><br><span class="line">    * <span class="doctag">@param</span> length, the number of digits in the original integer</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">permutation</span><span class="params">(Set&lt;Integer&gt; total, List&lt;Integer&gt; digits, <span class="keyword">int</span> min, <span class="keyword">int</span> max, <span class="keyword">int</span> value, <span class="keyword">int</span> pos, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        <span class="comment">// we have "rebuilt" a new integer with the same number of digits</span></span><br><span class="line">        <span class="keyword">if</span> (pos == length)&#123;</span><br><span class="line">            <span class="comment">// make sure it's within the range</span></span><br><span class="line">            <span class="keyword">if</span> (min &lt;= value &amp;&amp; value &lt;= max)&#123;</span><br><span class="line">                total.add(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.size(); i++)&#123;</span><br><span class="line">            <span class="comment">// avoid leading zero</span></span><br><span class="line">            <span class="keyword">if</span> (value != <span class="number">0</span> || digits.get(i) != <span class="number">0</span>)&#123;</span><br><span class="line">                value = value * <span class="number">10</span> + digits.get(i);</span><br><span class="line">                digits.remove(i);</span><br><span class="line">                permutation(total, digits, min, max, value, pos + <span class="number">1</span>, length);</span><br><span class="line">                digits.add(i, value % <span class="number">10</span>);</span><br><span class="line">                value /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * Compute the count of distinct pairs of elements in a set</span><br><span class="line">    * <span class="doctag">@param</span> size, total number of elements in a set</span><br><span class="line">    * <span class="doctag">@return</span> count of distinct pairs of elements</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">countPairs</span><span class="params">(Long size)</span></span>&#123;</span><br><span class="line">        <span class="comment">// make sure there is at least one pair</span></span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">2</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// assume we have n elements in an array, then for the first element, it can</span></span><br><span class="line">        <span class="comment">// form (n-1) pairs with the elements on its right; for the second </span></span><br><span class="line">        <span class="comment">// element, it can form (n-2) pairs with the elements on its right without</span></span><br><span class="line">        <span class="comment">// duplicated pairs from the previous step..... then for the last two </span></span><br><span class="line">        <span class="comment">// element, it can form 1 pair with the last one element, and for the last</span></span><br><span class="line">        <span class="comment">// element, it can form 0 pair. Thus, the total number of distinct pairs is</span></span><br><span class="line">        <span class="comment">// (0 + n - 1) * n / 2</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span> + size - <span class="number">1</span>) * size /<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * Convert a positive integer to a list of digits in the integer. For</span><br><span class="line">    * example, if the integer is 115, the method will return [5,1,1]</span><br><span class="line">    * <span class="doctag">@param</span> num, a positive integer.</span><br><span class="line">    * <span class="doctag">@return</span> a list of digits in the integer in reversed order</span><br><span class="line">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">intToDigits</span><span class="params">(Integer num)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ints = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span> || num &lt; <span class="number">0</span>)&#123;<span class="keyword">return</span> ints;&#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// process from the last digit to the first digit</span></span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> last = num % <span class="number">10</span>;</span><br><span class="line">            ints.add(last);</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">10000000</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">25000000</span>;</span><br><span class="line">		</span><br><span class="line">        <span class="keyword">long</span> total = scrambleCalculator(min,max);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
